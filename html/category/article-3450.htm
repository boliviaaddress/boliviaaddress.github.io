<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://boliviaaddress.github.io/html/category/article-3450.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>C++ 函数模板 - Bolivia Address</title>
    <link rel="icon" href="/assets/addons/xcblog/img/boliviaaddress/favicon.ico" type="image/x-icon"/>
        <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/boliviaaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?48ec1baacefae763d2c0b3b6955a6c32";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand d-flex align-items-center" href="/">
                        Bolivia Address</a>
                                
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>

                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">C++ 函数模板</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                      				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> 介绍</li> <li><i class="be be-arrowright"></i> 函数模板</li> <li><i class="be be-arrowright"></i> 选择排序</li> <li><i class="be be-arrowright"></i> 调用该排序函数</li> <li><i class="be be-arrowright"></i> CODE</li> </ul><span class="log-zd"><span class="log-close"><i class="be be-cross"></i><strong>目录</strong></span></span></div>  			</div> <blockquote> <h3 id="blogTitle1">•共勉</h3> <p>　　“那些疯狂到以为自己能够改变世界的人，才能真正改变世界。”</p> <p style="text-align: right">苹果 “非同凡响” 广告·1997</p> </blockquote> <blockquote> <h3 id="blogTitle1">•函数模板</h3> <span class="directory"></span><h4 id="title-0">介绍</h4> <ul> <li>C++另一种编程思想称为 泛型编程 ，主要利用的技术就是模板</li> <li>C++提供两种模板机制：函数模板 和 类模板</li> </ul> <span class="directory"></span><h4 id="title-1">函数模板</h4> <p>语法格式</p> <div class="cnblogs_code"> <pre>template <typename T><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">声明一个模板，告诉编译器后面代码中紧跟着的 T 不要报错，T 是一个通用数据类型</span> 函数声明或定义</pre> </div> <ul> <li>template：声明创建模板</li> <li>typename：表面其后面的符号是一种数据类型</li> <li>T：通用的数据类型，名称可以替换，通常为大写字母</li> </ul> <p>作用</p> <p>　　建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表。</p> <p>举例说明</p> <p>　　例如，对于如下交换函数：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">void</span> swapInt(<span style="color: rgba(0, 0, 255, 1)">int</span> &a,<span style="color: rgba(0, 0, 255, 1)">int</span> &<span style="color: rgba(0, 0, 0, 1)">b) {</span><span style="color: rgba(0, 0, 255, 1)">int</span> tmp =<span style="color: rgba(0, 0, 0, 1)"> a;     a</span>=<span style="color: rgba(0, 0, 0, 1)"> b;     b</span>=<span style="color: rgba(0, 0, 0, 1)"> tmp; }</span></pre> </div> <p>　　我们传递的参数只能是整数类型，如果我们想要交换 double 类型的呢？</p> <p>　　那当然是重写一份啦~</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">void</span> swapDouble(<span style="color: rgba(0, 0, 255, 1)">double</span>& a,<span style="color: rgba(0, 0, 255, 1)">double</span>&<span style="color: rgba(0, 0, 0, 1)"> b) {</span><span style="color: rgba(0, 0, 255, 1)">double</span> tmp =<span style="color: rgba(0, 0, 0, 1)"> a;     a</span>=<span style="color: rgba(0, 0, 0, 1)"> b;     b</span>=<span style="color: rgba(0, 0, 0, 1)"> tmp; }</span></pre> </div> <p>　　对于这两份代码，你会发现除了参数类型不同外，交换的步骤都是相同的。</p> <p>　　那如果要交换 short 类型的呢，在重写一份吗？</p> <p>　　会不会过于啰嗦，下面就引出函数模板的强大之处。</p> <p>　　我们可以这么写：</p> <div class="cnblogs_code"> <pre>template <typename T><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">声明一个模板，告诉编译器后面代码中紧跟着的T不要报错，T是一个通用数据类型</span><span style="color: rgba(0, 0, 255, 1)">void</span> mySwap(T& a, T&<span style="color: rgba(0, 0, 0, 1)"> b) {     T tmp</span>=<span style="color: rgba(0, 0, 0, 1)"> a;     a</span>=<span style="color: rgba(0, 0, 0, 1)"> b;     b</span>=<span style="color: rgba(0, 0, 0, 1)"> tmp; }</span></pre> </div> <p>　　利用函数模板实现数据交换，有两种调用方式：</p> <ul> <li>自动类型推导</li> <li>显示指定类型</li> </ul> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test() {</span><span style="color: rgba(0, 0, 255, 1)">int</span> a =<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">int</span> b =<span style="color: rgba(128, 0, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)">;      mySwap(a, b);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.自动类型推到</span>     cout <<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">a =</span><span style="color: rgba(128, 0, 0, 1)">"</span> << a <<<span style="color: rgba(0, 0, 0, 1)"> endl;     cout</span><<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">b =</span><span style="color: rgba(128, 0, 0, 1)">"</span> << b <<<span style="color: rgba(0, 0, 0, 1)"> endl;</span><span style="color: rgba(0, 0, 255, 1)">double</span> c =<span style="color: rgba(128, 0, 128, 1)">30</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">double</span> d =<span style="color: rgba(128, 0, 128, 1)">40</span><span style="color: rgba(0, 0, 0, 1)">;      mySwap</span><<span style="color: rgba(0, 0, 255, 1)">double</span>>(c, d);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.显示指定类型</span>     cout <<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">c =</span><span style="color: rgba(128, 0, 0, 1)">"</span> << c <<<span style="color: rgba(0, 0, 0, 1)"> endl;     cout</span><<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">d =</span><span style="color: rgba(128, 0, 0, 1)">"</span> << d <<<span style="color: rgba(0, 0, 0, 1)"> endl; }</span></pre> </div> <p>　　对于方式 1，编译器会自动识别传递的参数类型，并做相应的调整：</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/aa7db6db111f109ae92b5b6f145e9ac3.jpg" alt="C++ 函数模板" width="350" loading="lazy"/></p> <p style="text-align: left"> <p style="text-align: left">注意事项 1</p> <p style="text-align: left">　　传递的参数类型必须是同种类型的，即必须推导出一致的数据类型 T 才可以使用。</p> <p style="text-align: left">　　比如就不能通过<span class="cnblogs_code">mySwap</span>&nbsp; 函数交换 int 和 double 类型的数据：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test() {</span><span style="color: rgba(0, 0, 255, 1)">int</span> a =<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">double</span> b =<span style="color: rgba(128, 0, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)">;     myswap(a, b); }</span></pre> </div> <p>　　由于 a,b 不是同种类型的，在编译阶段就会报错：</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/0847dd9d1e780d1a21241df8594eb98a.jpg" alt="C++ 函数模板" width="520" loading="lazy"/></p> <p style="text-align: left">　　提示推导不出一致的 T 类型。</p> <p>注意事项 2</p> <p>　　必须遵循模板的声明和函数的声明一对一使用，即模板的声明只作用于紧挨着的函数声明。</p> <p>　　比如下面这种代码就会报错：</p> <div class="cnblogs_code"> <pre>template <typename T><span style="color: rgba(0, 0, 255, 1)">void</span> func1(T &<span style="color: rgba(0, 0, 0, 1)">a){}</span><span style="color: rgba(0, 0, 255, 1)">void</span> func2(T &a){}</pre> </div> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/1c38316175220b0323f59f2d88c66470.jpg" alt="C++ 函数模板" width="250" loading="lazy"/></p> <p style="text-align: left">　　因为声明的函数模板 T 只对<span class="cnblogs_code">func1</span>&nbsp; 起作用，如果<span class="cnblogs_code">func2</span>&nbsp; 也想用，必须重新声明：</p> <div class="cnblogs_code"> <pre>template <typename T><span style="color: rgba(0, 0, 255, 1)">void</span> func1(T &<span style="color: rgba(0, 0, 0, 1)">a) {}  template</span><typename T><span style="color: rgba(0, 0, 255, 1)">void</span> func2(T &a) {}</pre> </div> <p>&nbsp;注意事项 3</p> <p>&nbsp;　　模板必须要确定出 T 的数据类型，才可以使用。</p> <p>　　比如如下代码就会报错：</p> <div class="cnblogs_code"> <pre>template <typename T><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> func() {}</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test() {     func(); }</span></pre> </div> <p>　　因为函数<span class="cnblogs_code">func()</span>&nbsp; 的声明紧挨着模板的声明，所以他俩就是一对一的关系，那么要想调用<span class="cnblogs_code">func</span>&nbsp;，就必须给出 T 的数据类型；</p> <p>　　不然编译阶段都不通过。</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/360ba51bbc1057c1afe326714f29cf6f.jpg" alt="C++ 函数模板" width="350" loading="lazy"/></p> <p style="text-align: left">　　对于这种不含参数的函数模板，必须使用&nbsp;显示指定类型 来调用：</p> <div class="cnblogs_code"> <pre>template <typename T><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> func() {}</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test() {     func</span><<span style="color: rgba(0, 0, 255, 1)">int</span>><span style="color: rgba(0, 0, 0, 1)">(); }</span></pre> </div> <p>　　其中<span class="cnblogs_code"><<span style="color: rgba(0, 0, 255, 1)">int</span>></span>&nbsp;随便写个数据类型就行，作用就是告诉函数模板传递的 T 为<span class="cnblogs_code">XX 类型</span>&nbsp;。</p> </blockquote> <blockquote> <h3 id="blogTitle1">•学以致用</h3> <p>　　有了函数模板的知识储备，下面来写一个排序函数，不管是传入<span class="cnblogs_code"><span style="color: rgba(0, 0, 255, 1)">int</span> 类型</span>&nbsp; 还是<span class="cnblogs_code"><span style="color: rgba(0, 0, 255, 1)">char</span> 类型</span>&nbsp; 都可以实现升序排列。</p> <span class="directory"></span><h4 id="title-2">选择排序</h4> <div class="cnblogs_code"> <pre>template <typename T><span style="color: rgba(0, 0, 255, 1)">void</span> mySwap(T& a, T&<span style="color: rgba(0, 0, 0, 1)"> b) {     T tmp</span>=<span style="color: rgba(0, 0, 0, 1)"> a;     a</span>=<span style="color: rgba(0, 0, 0, 1)"> b;     b</span>=<span style="color: rgba(0, 0, 0, 1)"> tmp; } template</span><typename T><span style="color: rgba(0, 0, 255, 1)">void</span> mySort(T arr[],<span style="color: rgba(0, 0, 255, 1)">int</span> first,<span style="color: rgba(0, 0, 255, 1)">int</span> last)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">order [first, last)</span><span style="color: rgba(0, 0, 0, 1)">{</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = first; i < last; i++)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">选择排序</span><span style="color: rgba(0, 0, 0, 1)">    {</span><span style="color: rgba(0, 0, 255, 1)">int</span> minIndex =<span style="color: rgba(0, 0, 0, 1)"> i;</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> j = i +<span style="color: rgba(128, 0, 128, 1)">1</span>; j < last; j++<span style="color: rgba(0, 0, 0, 1)">)         {</span><span style="color: rgba(0, 0, 255, 1)">if</span> (arr[j] <<span style="color: rgba(0, 0, 0, 1)"> arr[minIndex])                 minIndex</span>=<span style="color: rgba(0, 0, 0, 1)"> j;         }         mySwap(arr[i], arr[minIndex]);     } }</span></pre> </div> <span class="directory"></span><h4 id="title-3">调用该排序函数</h4> <div class="cnblogs_code"> <pre>template <typename T><span style="color: rgba(0, 0, 255, 1)">void</span> print(<span style="color: rgba(0, 0, 255, 1)">const</span> T arr[],<span style="color: rgba(0, 0, 255, 1)">int</span> first,<span style="color: rgba(0, 0, 255, 1)">int</span> last)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">输出数组[first, last)</span><span style="color: rgba(0, 0, 0, 1)">{</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = first; i < last; i++<span style="color: rgba(0, 0, 0, 1)">)         cout</span><< arr[i] <<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     cout</span><<<span style="color: rgba(0, 0, 0, 1)"> endl; }</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test1() {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">测试对整形数组进行排序</span><span style="color: rgba(0, 0, 255, 1)">int</span> arr[<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i =<span style="color: rgba(128, 0, 128, 1)">0</span>; i <<span style="color: rgba(128, 0, 128, 1)">10</span>; i++<span style="color: rgba(0, 0, 0, 1)">)         arr[i]</span>= rand()%<span style="color: rgba(128, 0, 128, 1)">20</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">随机产生[0~20)之间的随机数</span><span style="color: rgba(0, 0, 0, 1)">     cout</span><<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序前：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     mySort(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     cout</span><<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序后：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">); }</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test2() {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">测试对字符型数组进行排序</span><span style="color: rgba(0, 0, 255, 1)">char</span> arr[<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i =<span style="color: rgba(128, 0, 128, 1)">0</span>; i <<span style="color: rgba(128, 0, 128, 1)">10</span>; i++<span style="color: rgba(0, 0, 0, 1)">)         arr[i]</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">A</span><span style="color: rgba(128, 0, 0, 1)">'</span>+rand() %<span style="color: rgba(128, 0, 128, 1)">20</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">随机产生[0~20)之间的随机数</span><span style="color: rgba(0, 0, 0, 1)">     cout</span><<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序前：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     mySort(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     cout</span><<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序后：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">); }</span></pre> </div> <span class="directory"></span><h4 id="title-4">CODE</h4> <div class="cnblogs_code"> <pre>#include<bits/stdc++.h><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> std;  template</span><typename T><span style="color: rgba(0, 0, 255, 1)">void</span> mySwap(T& a, T&<span style="color: rgba(0, 0, 0, 1)"> b) {     T tmp</span>=<span style="color: rgba(0, 0, 0, 1)"> a;     a</span>=<span style="color: rgba(0, 0, 0, 1)"> b;     b</span>=<span style="color: rgba(0, 0, 0, 1)"> tmp; } template</span><typename T><span style="color: rgba(0, 0, 255, 1)">void</span> mySort(T arr[],<span style="color: rgba(0, 0, 255, 1)">int</span> first,<span style="color: rgba(0, 0, 255, 1)">int</span> last)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">order [first, last)</span><span style="color: rgba(0, 0, 0, 1)">{</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = first; i < last; i++)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">选择排序</span><span style="color: rgba(0, 0, 0, 1)">    {</span><span style="color: rgba(0, 0, 255, 1)">int</span> minIndex =<span style="color: rgba(0, 0, 0, 1)"> i;</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> j = i +<span style="color: rgba(128, 0, 128, 1)">1</span>; j < last; j++<span style="color: rgba(0, 0, 0, 1)">)         {</span><span style="color: rgba(0, 0, 255, 1)">if</span> (arr[j] <<span style="color: rgba(0, 0, 0, 1)"> arr[minIndex])                 minIndex</span>=<span style="color: rgba(0, 0, 0, 1)"> j;         }         mySwap(arr[i], arr[minIndex]);     } } template</span><typename T><span style="color: rgba(0, 0, 255, 1)">void</span> print(<span style="color: rgba(0, 0, 255, 1)">const</span> T arr[],<span style="color: rgba(0, 0, 255, 1)">int</span> first,<span style="color: rgba(0, 0, 255, 1)">int</span> last)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">输出数组[first, last)</span><span style="color: rgba(0, 0, 0, 1)">{</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = first; i < last; i++<span style="color: rgba(0, 0, 0, 1)">)         cout</span><< arr[i] <<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     cout</span><<<span style="color: rgba(0, 0, 0, 1)"> endl; }</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test1() {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">测试对整形数组进行排序</span><span style="color: rgba(0, 0, 255, 1)">int</span> arr[<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i =<span style="color: rgba(128, 0, 128, 1)">0</span>; i <<span style="color: rgba(128, 0, 128, 1)">10</span>; i++<span style="color: rgba(0, 0, 0, 1)">)         arr[i]</span>= rand()%<span style="color: rgba(128, 0, 128, 1)">20</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">随机产生[0~20)之间的随机数</span><span style="color: rgba(0, 0, 0, 1)">     cout</span><<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序前：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     mySort(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     cout</span><<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序后：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">); }</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test2() {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">测试对字符型数组进行排序</span><span style="color: rgba(0, 0, 255, 1)">char</span> arr[<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i =<span style="color: rgba(128, 0, 128, 1)">0</span>; i <<span style="color: rgba(128, 0, 128, 1)">10</span>; i++<span style="color: rgba(0, 0, 0, 1)">)         arr[i]</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">A</span><span style="color: rgba(128, 0, 0, 1)">'</span>+rand() %<span style="color: rgba(128, 0, 128, 1)">20</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">随机产生[0~20)之间的随机数</span><span style="color: rgba(0, 0, 0, 1)">     cout</span><<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序前：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     mySort(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     cout</span><<<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序后：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">); }</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> main() {     test1();     test2();</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">; }</span></pre> </div> </blockquote> <blockquote> <h3 id="blogTitle1">•结尾</h3> <p>　　咳咳，本次内容到此结束，<span style="text-decoration: line-through">完结撒花</span>。</p> </blockquote> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3449.htm">如何在IDEA 中配置 Maven</a></p>
                                                <p>下一个：<a href="/html/category/article-3451.htm">使用canvas制作验证码</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-5978.htm" title="动物疫苗在哪里买比较好一点（动物疫苗在哪里买比较好一点的）">动物疫苗在哪里买比较好一点（动物疫苗在哪里买比较好一点的）</a></li>
                        <li class="py-2"><a href="/html/category/article-6730.htm" title="被家猫抓伤轻微出血可以用碘伏吗（被猫抓伤出血可以用碘伏消毒吗）">被家猫抓伤轻微出血可以用碘伏吗（被猫抓伤出血可以用碘伏消毒吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6869.htm" title="被宠物猫抓出血了有事吗（被宠物猫抓出血了有事吗）">被宠物猫抓出血了有事吗（被宠物猫抓出血了有事吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6776.htm" title="动物疫苗贵吗多少钱（动物疫苗多少钱一支）">动物疫苗贵吗多少钱（动物疫苗多少钱一支）</a></li>
                        <li class="py-2"><a href="/html/category/article-4538.htm" title="春节指的是除夕还是正月初一(春节是农历的哪一天除夕是哪天)">春节指的是除夕还是正月初一(春节是农历的哪一天除夕是哪天)</a></li>
                        <li class="py-2"><a href="/html/category/article-4574.htm" title="动物疫苗多少钱打一次针啊图片 动物疫苗多少钱打一次针啊图片大全">动物疫苗多少钱打一次针啊图片 动物疫苗多少钱打一次针啊图片大全</a></li>
                        <li class="py-2"><a href="/html/category/article-4467.htm" title="动物诊疗机构办理动物诊疗许可证需要多久 动物诊疗机构办理动物诊疗许可证需要多久">动物诊疗机构办理动物诊疗许可证需要多久 动物诊疗机构办理动物诊疗许可证需要多久</a></li>
                        <li class="py-2"><a href="/html/category/article-6173.htm" title="上海市青浦区第二中学分数线2023（青浦区二中最低分数线是多少）">上海市青浦区第二中学分数线2023（青浦区二中最低分数线是多少）</a></li>
                        <li class="py-2"><a href="/html/category/article-4609.htm" title="欢颜剧情介绍,演员表,角色介绍,剧集评价(欢颜剧情介绍,演员表,角色介绍,剧集评价语)">欢颜剧情介绍,演员表,角色介绍,剧集评价(欢颜剧情介绍,演员表,角色介绍,剧集评价语)</a></li>
                        <li class="py-2"><a href="/html/category/article-6084.htm" title="宠物领养网免费平台有哪些公司的 宠物领养网免费平台有哪些公司的">宠物领养网免费平台有哪些公司的 宠物领养网免费平台有哪些公司的</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                    <p>Bolivia Address 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/jquery-3.3.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>