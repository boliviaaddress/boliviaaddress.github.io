<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://boliviaaddress.github.io/html/category/article-3517.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Java指令重排序在多线程环境下的应对策略 - Bolivia Address</title>
    <link rel="icon" href="/assets/addons/xcblog/img/boliviaaddress/favicon.ico" type="image/x-icon"/>
        <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/boliviaaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?48ec1baacefae763d2c0b3b6955a6c32";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand d-flex align-items-center" href="/">
                        Bolivia Address</a>
                                
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>

                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">Java指令重排序在多线程环境下的应对策略</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h3 id="一序言">一、序言</h3> <p>指令重排在单线程环境下有利于提高程序的执行效率，不会对程序产生负面影响；在多线程环境下，指令重排会给程序带来意想不到的错误。</p> <p>本文对多线程指令重排问题进行复原，并针对指令重排给出相应的解决方案。</p> <h3 id="二问题复原">二、问题复原</h3> <h4 id="一关联变量">（一）关联变量</h4> <p>下面给出一个能够百分之百复原指令重排的例子。</p> <pre><code class="language-java">public class D {     static Integer a;     static Boolean flag;          public static void writer() {         a = 1;         flag = true;     }          public static void reader() {         if (flag != null &amp;&amp; flag) {             System.out.println(a);             a = 0;             flag = false;         }     } }</code></pre> <h5 id="1结果预测">1、结果预测</h5> <p><code>reader</code>方法仅在<code>flag</code>变量为true时向控制台打印变量<code>a</code>的值。</p> <p><code>writer</code>方法先执行变量<code>a</code>的赋值操作，后执行变量<code>flag</code>的赋值操作。</p> <p>如果按照上述分析逻辑，那么控制台打印的结果一定全为1。</p> <h5 id="2指令重排">2、指令重排</h5> <p>假如代码未发生指令重排，那么当<code>flag</code>变量为true时，变量<code>a</code>一定为1。</p> <p>上述代码中关于变量<code>a</code>和变量<code>flag</code>在两个方法类均存在指令重排的情况。</p> <pre><code class="language-java">public static void writer() {     a = 1;     flag = true; }</code></pre> <p>通过观察日志输出，发现有大量的0输出。</p> <p>当<code>writer</code>方法内部发生指令重排时，<code>flag</code>变量先完成赋值，此时假如当前线程发生中断，其它线程在调用<code>reader</code>方法，检测到<code>flag</code>变量为true，那么便打印变量<code>a</code>的值。此时控制台存在超出期望值的结果。</p> <h4 id="二new创建对象">（二）new创建对象</h4> <p>使用关键字new创建对象时，因其非原子操作，故存在指令重排，指令重排在多线程环境下会带来负面影响。</p> <pre><code class="language-java">public class Singleton {     private static UserModel instance;          public static UserModel getInstance() {         if (instance == null) {             synchronized (Singleton.class) {                 if (instance == null) {                     instance = new UserModel(2, "B");                 }             }         }         return instance;     } }  @Data @AllArgsConstructor class UserModel {     private Integer userId;     private String userName; }</code></pre> <h5 id="1解析创建过程">1、解析创建过程</h5> <ul> <li>使用关键字new创建一个对象，大致分为一下过程：</li> <li>在栈空间创建引用地址</li> <li>以类文件为模版在堆空间对象分配内存</li> <li>成员变量初始化</li> <li>使用构造函数初始化</li> <li>将引用值赋值给左侧存储变量</li> </ul> <h5 id="2重排序过程分析">2、重排序过程分析</h5> <p>针对上述示例，假设第一个线程进入synchronized代码块，并开始创建对象，由于重排序存在，正常的创建对象过程被打乱，可能会出现在栈空间创建引用地址后，将引用值赋值给左侧存储变量，随后因CPU调度时间片耗尽而产生中断的情况。</p> <p>后续线程在检测到<code>instance</code>变量不为空，则直接使用。因为单例对象并为实例化完成，直接使用会带来意想不到的结果。</p> <h3 id="三应对指令重排">三、应对指令重排</h3> <h4 id="一atomicreference原子类">（一）AtomicReference原子类</h4> <p>使用原子类将一组相关联的变量封装成一个对象，利用原子操作的特性，有效回避指令重排问题。</p> <pre><code class="language-java">@Data @NoArgsConstructor @AllArgsConstructor public class ValueModel {     private Integer value;     private Boolean flag; }</code></pre> <p>原子类应该是解决多线程环境下指令重排的首选方案，不仅通俗易懂，而且线程间使用的非重量级互斥锁，效率相对较高。</p> <pre><code class="language-java">public class E {     private static final AtomicReference&lt;ValueModel&gt; ar = new AtomicReference&lt;&gt;(new ValueModel());          public static void writer() {         ar.set(new ValueModel(1, true));     }          public static void reader() {         ValueModel valueModel = ar.get();         if (valueModel.getFlag() != null &amp;&amp; valueModel.getFlag()) {             System.out.println(valueModel.getValue());             ar.set(new ValueModel(0, false));         }     } }</code></pre> <blockquote> <p>当一组相关联的变量发生指令重排时，使用原子操作类是比较优的解法。</p> </blockquote> <h4 id="二volatile关键字">（二）volatile关键字</h4> <pre><code class="language-java">public class Singleton {     private volatile static UserModel instance;          public static UserModel getInstance() {         if (instance == null) {             synchronized (Singleton.class) {                 if (instance == null) {                     instance = new UserModel(2, "B");                 }             }         }         return instance;     } }  @Data @AllArgsConstructor class UserModel {     private Integer userId;     private String userName; }</code></pre> <h3 id="四指令重排的理解">四、指令重排的理解</h3> <h5 id="1指令重排广泛存在">1、指令重排广泛存在</h5> <p>指令重排不仅限于Java程序，实际上各种编译器均有指令重排的操作，从软件到CPU硬件都有。指令重排是对单线程执行的程序的一种性能优化，需要明确的是，指令重排在单线程环境下，不会改变顺序程序执行的预期结果。</p> <h5 id="2多线程环境指令重排">2、多线程环境指令重排</h5> <p>上面讨论了两种典型多线程环境下指令重排，分析其带来负面影响，并分别提供了应对方式。</p> <ul> <li>对于关联变量，先封装成一个对象，然后使用原子类来操作</li> <li>对于new对象，使用volatile关键字修饰目标对象即可</li> </ul> <h5 id="3synchronized锁与重排序无关">3、synchronized锁与重排序无关</h5> <p>synchronized锁通过互斥锁，有序的保证线程访问特定的代码块。代码块内部的代码正常按照编译器执行的策略重排序。</p> <p>尽管synchronized锁能够回避多线程环境下重排序带来的不利影响，但是互斥锁带来的线程开销相对较大，不推荐使用。</p> <blockquote> <p>synchronized 块里的非原子操作依旧可能发生指令重排</p> </blockquote> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3516.htm">Redis 内存满了怎么办？这样设置才正确！</a></p>
                                                <p>下一个：<a href="/html/category/article-3518.htm">Vue中使用el-table组件多页选择数据回显，分页记录保存选中的数据</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3704.htm" title="微服务架构-分布式服务中,Feign请求拦截器实现日志链路的跟踪">微服务架构-分布式服务中,Feign请求拦截器实现日志链路的跟踪</a></li>
                        <li class="py-2"><a href="/html/category/article-3724.htm" title="MyBatis &#8211; typeAliases不能正确解析问题的处理方法">MyBatis &#8211; typeAliases不能正确解析问题的处理方法</a></li>
                        <li class="py-2"><a href="/html/category/article-3682.htm" title="Docker极简入门：使用Docker-Compose 运行网站浏览量统计Demo">Docker极简入门：使用Docker-Compose 运行网站浏览量统计Demo</a></li>
                        <li class="py-2"><a href="/html/category/article-3703.htm" title="Git回退代码到某次commit">Git回退代码到某次commit</a></li>
                        <li class="py-2"><a href="/html/category/article-3722.htm" title="MyBatis:SQL语句中的foreach标签的详细介绍">MyBatis:SQL语句中的foreach标签的详细介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-3714.htm" title="windows配置kubectl访问k8s集群">windows配置kubectl访问k8s集群</a></li>
                        <li class="py-2"><a href="/html/category/article-3696.htm" title="UML——顺序图">UML——顺序图</a></li>
                        <li class="py-2"><a href="/html/category/article-3687.htm" title="Pandas大数据量内存优化">Pandas大数据量内存优化</a></li>
                        <li class="py-2"><a href="/html/category/article-3685.htm" title="ForkJoin详解及应用">ForkJoin详解及应用</a></li>
                        <li class="py-2"><a href="/html/category/article-3728.htm" title="Linux  C++  实现一个简易版的ping （也就是ICMP协议）">Linux  C++  实现一个简易版的ping （也就是ICMP协议）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                    <p>Bolivia Address 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/jquery-3.3.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>