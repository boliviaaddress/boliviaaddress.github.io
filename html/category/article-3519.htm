<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://boliviaaddress.github.io/html/category/article-3519.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Python语法学习之进程的创建与常用方法详解_python - Bolivia Address</title>
    <link rel="icon" href="/assets/addons/xcblog/img/boliviaaddress/favicon.ico" type="image/x-icon"/>
        <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/boliviaaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?48ec1baacefae763d2c0b3b6955a6c32";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand d-flex align-items-center" href="/">
                        Bolivia Address</a>
                                
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>

                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">Python语法学习之进程的创建与常用方法详解_python</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li>进程的创建模块 - multiprocessing</li> <ul class="second_class_ul"> <li>创建进程函数 - Process</li> </ul> <li>进程的常用方法</li> <ul class="second_class_ul"> <li>start 函数</li> <li>join 函数</li> <li>kill 函数 与 is_alive 函数</li> </ul> <li>进程的相关问题</li> <ul class="second_class_ul"></ul> </ul> </div> <p>该章节我们来学习一下在 Python 中去创建并使用多进程的方法，通过学习该章节，我们将可以通过创建多个进程来帮助我们提高脚本执行的效率。可以认为缩短脚本执行的时间，就是提高执行我们脚本的效率。接下来让我们都看一下今天的章节知识点都有哪些？</p> <p class="maodian"></p> <h2>进程的创建模块 - multiprocessing</h2> <p class="maodian"></p> <h3>创建进程函数 - Process</h3> <table> <tbody> <tr> <th>函数名</th> <th>介绍</th> <th>参数</th> <th>返回值</th> </tr> <tr> <td>Process</td> <td>创建一个进程</td> <td>target, args</td> <td>进程对象</td> </tr> </tbody> </table> <p>Process功能介绍：实例化一个对象；它需要传入两个参数 target 与 args：target 是一个函数，args 是对应一个函数的参数(args参数是一个元组)。其实我们可以这样去理解，在一个脚本中创建子进程，目的是为了让它执行我们脚本中的某个函数。换句话讲，我们将脚本中的某一个函数单独的启用一个进程去执行。</p> <p>我们说过进程之间互不干扰，可以同时执行。所以我们可以认为主进程中的程序和子进程的函数是相互不干扰的，听起来可能很难理解，一会儿下文我们进行一个案例的小练习，一遍帮助大家去更好的理解其中的含义。</p> <p class="maodian"></p> <h2>进程的常用方法</h2> <table> <tbody> <tr> <th>函数名</th> <th>介绍</th> <th>参数</th> <th>返回值</th> </tr> <tr> <td>start</td> <td>执行进程</td> <td>无</td> <td>无</td> </tr> <tr> <td>join</td> <td>阻塞进程</td> <td>无</td> <td>无</td> </tr> <tr> <td>kill</td> <td>杀死进程</td> <td>无</td> <td>无</td> </tr> <tr> <td>is_alive</td> <td>判断进程是否存活</td> <td>无</td> <td>bool</td> </tr> </tbody> </table> <ul> <li>start 函数：通过调用它，可以直接启动我们创建的进程。它会马上执行我们进程中传入的函数，start 函数没有任何参数，也没有返回值。</li> <li>join 函数：我们说过，主进程和子进程的程序会同时运行，互不影响。这样就会有一个问题，有可能是 子进程 先执行完它的业务，也有可能是 主进程 先执行完它的业务逻辑。如果有的时候我们必须要先执行完 子进程的业务 再执行 主进程的业务 。则通过调用 join 函数，在这一函数下面执行的主进程业务要等待子进程完成之后才会继续执行。我们将 join 这样的函数叫做 等待/阻塞函数。join 函数没有任何参数，也没有返回值。</li> <li>kill 函数：如果我们在执行子进程的过程中发现不需要这个子进程继续运行了，就可以使用 kill 函数杀死当前的这个子进程，杀死的这个子进程不会在执行子进程中函数的业务逻辑。kill 函数没有任何参数，也没有返回值。</li> <li>is_alive 函数：通过调用这个函数可以判断当前的进程是否是存活状态，它返回一个 bool 值。True 表示当前进程还在，程序还在继续执行；如果是 False 则代表当前进程已经结束了</li> </ul> <p class="maodian"></p> <h3>start 函数</h3> <p>演示案例：</p> <ul> <li>我们先定义两个简单的函数，每个函数定义两个简单的 for 循环。</li> <li>每执行一次循环，休眠一秒的时间。</li> <li>在两次循环的开始定义一个实例化时间对象，用以计算两次循环的时间间隔。</li> <li>同时，获取脚本执行的进程号; 看看是一个怎样的结果。</li> </ul> <div class="ay1code"> <pre class="brush:py;"># coding:utf-8      import time  import os      def work_for_first():        for i in range(5):          print('\'work_for_first\' 函数的循环值：%s', '进程号为：%s' % i, os.getpid())	# os.getpid() 为获取进程号函数          time.sleep(1)      def work_for_second():      for i in range(5):          print('\'work_for_second\' 函数的循环值：%s',  '进程号为：%s' % i, os.getpid())          time.sleep(1)      if __name__ == '__main__':      start_time = time.time()    # 获取执行 循环 之前的时间戳      work_for_first()      work_for_second()      end_time = time.time() - start_time     # 获取执行 循环 结束的时间戳      print('耗时时间为：{}, 进程号为：{}'.format(end_time, os.getpid()))  # 获取耗时与进程号  </pre> </div> <p>执行结果如下图：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/ec7734993dcffb067e72e3648f618bb9.jpg"></p> <p>OKK！接下来进入我们今天要学习的主题。</p> <p>将 work_for_first() 函数创建一个新的子进程去执行。</p> <div class="ay1code"> <pre class="brush:py;"># coding:utf-8      import time  import os  import multiprocessing      def work_for_first():        for i in range(5):          print('\'work_for_first\' 函数的循环值：{}，进程号为：{}'.format(i, os.getpid()))          time.sleep(1)      def work_for_second():      for i in range(5):          print('\'work_for_second\' 函数的循环值：{}，进程号为：{}'.format(i, os.getpid()))          time.sleep(1)      if __name__ == '__main__':      start_time = time.time()    # 获取执行 循环 之前的时间戳      work_for_first_process = multiprocessing.Process(target=work_for_first)     # 因为我们传入的函数没有参数所以 args 可以不写      work_for_first_process.start()      work_for_second()      end_time = time.time() - start_time     # 获取执行 循环 结束的时间戳      print('耗时时间为：{}, 进程号为：{}'.format(end_time, os.getpid()))  # 获取耗时与进程号  </pre> </div> <p>执行结果如下图：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/1b82472f4a08a846c7a34e6143bbc14c.jpg"></p> <p>因为我们针对 work_for_first() 函数创建一个新的子进程去执行，所以我们的耗时变为了 5秒。那么如果我们将 work_for_second() 函数也创建一个新的子进程去执行，耗时又会是多少呢？我们接着往下看。</p> <div class="ay1code"> <pre class="brush:py;"># coding:utf-8      import time  import os  import multiprocessing      def work_for_first():        for i in range(5):          print('\'work_for_first\' 函数的循环值：{}，进程号为：{}'.format(i, os.getpid()))          time.sleep(1)      def work_for_second():      for i in range(5):          print('\'work_for_second\' 函数的循环值：{}，进程号为：{}'.format(i, os.getpid()))          time.sleep(1)      if __name__ == '__main__':      start_time = time.time()    # 获取执行 循环 之前的时间戳      work_for_first_process = multiprocessing.Process(target=work_for_first)     # 因为我们传入的函数没有参数所以 args 可以不写      work_for_first_process.start()        work_for_second_process = multiprocessing.Process(target=work_for_second)      work_for_second_process.start()      end_time = time.time() - start_time     # 获取执行 循环 结束的时间戳      print('耗时时间为：{}, 进程号为：{}'.format(end_time, os.getpid()))  # 获取耗时与进程号  </pre> </div> <p>执行结果如下图：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/f86c8d8ec844d7d5101e39b97339758e.jpg"></p> <p>PS：从脚本中执行入口的 main 函数可以看出 work_for_first() 函数 与 work_for_second() 函数 分别都由各自的子进程来执行，主进程实际执行的 只有 23行、29行、30行代码，所以从耗时来看，主进程实际上只执行了 0.026 秒。</p> <p>这里再思考一个问题，如果是每一个子进程都单独的通过 .start 去启动，那么在子进程很多的情况下，启动的确实会有一些慢了。这个时候我们就可以通过 for 循环的方式去启动子进程。方式如下：</p> <div class="ay1code"> <pre class="brush:py;">    for sun_process in (work_for_first_process, work_for_second_process):          sun_process.start()  </pre> </div> <p class="maodian"></p> <h3>join 函数</h3> <p>同样的也会存在着这样一种情况，我们希望子进程运行结束之后再去执行我们的主进程，这时候我们就会使用到 join 函数 。</p> <p>这里我们就利用上文的 进程 for循环同时启动两个子进程，然后我们再在下一个 for循环 执行 join 函数，我们看看会发生什么。</p> <div class="ay1code"> <pre class="brush:py;"># coding:utf-8      import time  import os  import multiprocessing      def work_for_first():        for i in range(5):          print('\'work_for_first\' 函数的循环值：{}，进程号为：{}'.format(i, os.getpid()))          time.sleep(1)      def work_for_second():      for i in range(5):          print('\'work_for_second\' 函数的循环值：{}，进程号为：{}'.format(i, os.getpid()))          time.sleep(1)      if __name__ == '__main__':      start_time = time.time()    # 获取执行 循环 之前的时间戳      work_for_first_process = multiprocessing.Process(target=work_for_first)     # 因为我们传入的函数没有参数所以 args 可以不写      # work_for_first_process.start()        work_for_second_process = multiprocessing.Process(target=work_for_second)      # work_for_second_process.start()        for sun_process in (work_for_first_process, work_for_second_process):          sun_process.start()        for sun_process in (work_for_first_process, work_for_second_process):          sun_process.join()        end_time = time.time() - start_time     # 获取执行 循环 结束的时间戳      print('耗时时间为：{}, 进程号为：{}'.format(end_time, os.getpid()))  # 获取耗时与进程号  </pre> </div> <p>执行结果如下图：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/2bf93bc948ff9470423b6ee6c75301e0.jpg"></p> <p class="maodian"></p> <h3>kill 函数 与 is_alive 函数</h3> <p>接下来我们再尝试一个场景，利用 for 循环，我们同时启动 work_for_first() 函数 与 work_for_second() 函数 的子进程。然后我们再在另一个 for 循环中，将 work_for_second() 函数 的子进程 kill 掉，然后判断两个子进程的存活状态。</p> <p>示例脚本如下：</p> <div class="ay1code"> <pre class="brush:py;"># coding:utf-8      import time  import os  import multiprocessing      def work_for_first():        for i in range(5):          print('\'work_for_first\' 函数的循环值：{}，进程号为：{}'.format(i, os.getpid()))          time.sleep(1)      def work_for_second():      for i in range(5):          print('\'work_for_second\' 函数的循环值：{}，进程号为：{}'.format(i, os.getpid()))          time.sleep(1)      if __name__ == '__main__':      start_time = time.time()    # 获取执行 循环 之前的时间戳      work_for_first_process = multiprocessing.Process(target=work_for_first)     # 因为我们传入的函数没有参数所以 args 可以不写      # work_for_first_process.start()        work_for_second_process = multiprocessing.Process(target=work_for_second)      # work_for_second_process.start()        for sun_process in (work_for_first_process, work_for_second_process):          sun_process.start()          time.sleep(1)   # 休眠一秒是为了 work_for_second_process 子进程 至少能够运行一次          for sun_process in (work_for_first_process, work_for_second_process):          work_for_second_process.kill()          if work_for_first_process.is_alive():              print('\'work_for_first_process\' 子进程当前存活状态为：True')          elif not work_for_second_process.is_alive():              print('\'work_for_second_process\' 子进程当前存活状态为：False')            sun_process.join()        end_time = time.time() - start_time     # 获取执行 循环 结束的时间戳      print('耗时时间为：{}, 进程号为：{}'.format(end_time, os.getpid()))  # 获取耗时与进程号  </pre> </div> <p>运行结果如下：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/a4a90ed272f9a86faa793407e239dcbe.jpg"></p> <p class="maodian"></p> <h2>进程的相关问题</h2> <p>通过学习多进程的创建、启动，我们可以充分的体会到进程给我们带来的好处。它可以使我们的脚本程序执行时间进行缩短，从而提高工作效率。</p> <p>然而多进程也有一些问题：</p> <ul> <li>通过进程模块执行的函数无法获取返回值，即便这个函数拥有 return 关键字也无法获取到，这也是我们进程的弊端。</li> <li>多个进程同时修改文件可能会出现错误。</li> <li>进程数量太多可能会造成资源不足、甚至死机等情况。</li> </ul> <p>关于进程的这些问题，其实也并不是不能解决。在后续更新的 进程间的通信 、进程池与进程锁 的章节我们再进行详细的介绍。</p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3518.htm">Vue中使用el-table组件多页选择数据回显，分页记录保存选中的数据</a></p>
                                                <p>下一个：<a href="/html/category/article-3520.htm">我的树莓派 Raspberry Pi Zero 2W 折腾笔记，记录一些遇到的问题和解决办法</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7650.htm" title="宠物领养证如何办理手续和流程视频（宠物领养中心领养要钱吗）">宠物领养证如何办理手续和流程视频（宠物领养中心领养要钱吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7559.htm" title="广州猫领养中心地址查询电话（广州猫领养中心地址查询电话号码）">广州猫领养中心地址查询电话（广州猫领养中心地址查询电话号码）</a></li>
                        <li class="py-2"><a href="/html/category/article-7190.htm" title="长沙宠物猫领养中心地址 长沙宠物猫领养中心地址在哪里">长沙宠物猫领养中心地址 长沙宠物猫领养中心地址在哪里</a></li>
                        <li class="py-2"><a href="/html/category/article-7375.htm" title="全国宠物领养 全国宠物领养中心官网">全国宠物领养 全国宠物领养中心官网</a></li>
                        <li class="py-2"><a href="/html/category/article-7973.htm" title="哑巴的眼神,无声却震撼人心(哑巴的眼神,无声却震撼什么意思)">哑巴的眼神,无声却震撼人心(哑巴的眼神,无声却震撼什么意思)</a></li>
                        <li class="py-2"><a href="/html/category/article-7835.htm" title="动物医院资质 动物医院资质查询官网">动物医院资质 动物医院资质查询官网</a></li>
                        <li class="py-2"><a href="/html/category/article-8065.htm" title="宠福鑫动物医院电话云岗（宠福康宠物医院）">宠福鑫动物医院电话云岗（宠福康宠物医院）</a></li>
                        <li class="py-2"><a href="/html/category/article-7558.htm" title="开个宠物粮加工厂怎么样啊视频教学（开个宠物粮加工厂怎么样啊视频教学大全）">开个宠物粮加工厂怎么样啊视频教学（开个宠物粮加工厂怎么样啊视频教学大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-8157.htm" title="凸轮转子泵厂家排名(凸轮转子泵生产厂家)">凸轮转子泵厂家排名(凸轮转子泵生产厂家)</a></li>
                        <li class="py-2"><a href="/html/category/article-7467.htm" title="动物疫苗多少钱一只啊图片视频（动物疫苗要打几针）">动物疫苗多少钱一只啊图片视频（动物疫苗要打几针）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                    <p>Bolivia Address 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/jquery-3.3.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>