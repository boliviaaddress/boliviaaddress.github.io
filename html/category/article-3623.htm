<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://boliviaaddress.github.io/html/category/article-3623.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Java map详解 &#8211; 用法、遍历、排序、常用API等 - Bolivia Address</title>
    <link rel="icon" href="/assets/addons/xcblog/img/boliviaaddress/favicon.ico" type="image/x-icon"/>
        <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/boliviaaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?48ec1baacefae763d2c0b3b6955a6c32";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand d-flex align-items-center" href="/">
                        Bolivia Address</a>
                                
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>

                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">Java map详解 &#8211; 用法、遍历、排序、常用API等</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="htmledit_views"> <div class="code-name"> <h1><span style="font-family:Microsoft YaHei; font-size:18px">Java map详解 - 用法、遍历、排序、常用API等</span></h1> <div><span style="font-family:Microsoft YaHei; font-size:18px">博客来自：<a target="_blank" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://baike.xsoftlab.net/view/250.html"  rel="nofollow">http://baike.xsoftlab.net/view/250.html</a></span></div> <div><span style="font-family:Microsoft YaHei; font-size:18px"><br /></span></div> </div> <div class="code-tag"><span style="font-family:Microsoft YaHei; font-size:18px"><a target="_blank" href="/tag?tags=java" rel="nofollow">java</a><a target="_blank" href="/tag?tags=map" rel="nofollow">map</a><a target="_blank" href="/tag?tags=%E9%81%8D%E5%8E%86" rel="nofollow">遍历</a><a target="_blank" href="/tag?tags=%E7%94%A8%E6%B3%95" rel="nofollow">用法</a><a target="_blank" href="/tag?tags=%E6%8E%92%E5%BA%8F" rel="nofollow">排序</a></span></div> <div class="code-intro"><span style="font-family:Microsoft YaHei; font-size:18px">概要：</span></p> <p style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">java.util 中的集合类包含 Java 中某些最常用的类。最常用的集合类是 List 和 Map。</span></p> <p style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">Map 提供了一个更通用的元素存储方法。Map 集合类用于存储元素对（称作“键”和“值”），其中每个键映射到一个值。</span></p> <p style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">本文主要介绍java map的初始化、用法、map的四种常用的遍历方式、map的排序以及常用api。</span></p> </div> <div class="code-catalog"> <h2><span style="font-family:Microsoft YaHei; font-size:18px"><span class="index">| |</span><span class="content">目录</span></span></h2> <ul class="catalog-body"></ul> </div> <div id="code-content-body" class="code col-sm-12"> <h2><span style="font-family:Microsoft YaHei; font-size:18px">Map用法</span></h2> <h3 style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">类型介绍<br /></span></h3> <p style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">Java 自带了各种 Map 类。这些 Map 类可归为三种类型：</span></p> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">1. 通用Map，用于在应用程序中管理映射，通常在 java.util 程序包中实现</span></p> <ul class="list-paddingleft-2" style="list-style-type:disc"> <li> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">HashMap</span></p> </li> <li> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">Hashtable</span></p> </li> <li> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">Properties</span></p> </li> <li> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">LinkedHashMap</span></p> </li> <li> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">IdentityHashMap</span></p> </li> <li> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">TreeMap</span></p> </li> <li> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">WeakHashMap</span></p> </li> <li> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">ConcurrentHashMap</span></p> </li> </ul> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">2. 专用Map，通常我们不必亲自创建此类Map，而是通过某些其他类对其进行访问</span></p> <ul class="list-paddingleft-2" style="list-style-type:disc"> <li> <p><span style="font-family:Microsoft YaHei; font-size:18px">java.util.jar.Attributes</span></p> </li> <li> <p><span style="font-family:Microsoft YaHei; font-size:18px">javax.print.attribute.standard.PrinterStateReasons</span></p> </li> <li> <p><span style="font-family:Microsoft YaHei; font-size:18px">java.security.Provider</span></p> </li> <li> <p><span style="font-family:Microsoft YaHei; font-size:18px">java.awt.RenderingHints</span></p> </li> <li> <p><span style="font-family:Microsoft YaHei; font-size:18px">javax.swing.UIDefaults</span></p> </li> </ul> <p><span style="font-family:Microsoft YaHei; font-size:18px">3. 一个用于帮助我们实现自己的Map类的抽象类<br /></span></p> <ul class="list-paddingleft-2" style="list-style-type:disc"> <li> <p><span style="font-family:Microsoft YaHei; font-size:18px">AbstractMap</span></p> </li> </ul> <h3><span style="font-family:Microsoft YaHei; font-size:18px">类型区别</span></h3> <p><strong><span style="font-family:Microsoft YaHei; font-size:18px">HashMap</span></strong></p> <p style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">最常用的Map,它根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度。HashMap最多只允许一条记录的键为Null(多条会覆盖);允许多条记录的值为 Null。非同步的。</span></p> <p style="text-indent:0em"><strong><span style="font-family:Microsoft YaHei; font-size:18px">TreeMap</span></strong></p> <p style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">能够把它保存的记录根据键(key)排序,默认是按升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。TreeMap不允许key的值为null。非同步的。<br /><strong>Hashtable</strong></span></p> <p style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">与 HashMap类似,不同的是:key和value的值均不允许为null;它支持线程的同步，即任一时刻只有一个线程能写Hashtable,因此也导致了Hashtale在写入时会比较慢。<br /><strong>LinkedHashMap</strong></span></p> <p style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.在遍历的时候会比HashMap慢。key和value均允许为空，非同步的。</span></p> <h3><span style="font-family:Microsoft YaHei; font-size:18px">Map 初始化</span></h3> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span></pre> <h3><span style="font-family:Microsoft YaHei; font-size:18px">插入元素</span></h3> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">map.put("key1", "value1");</span></pre> <h3><span style="font-family:Microsoft YaHei; font-size:18px">获取元素</span></h3> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">map.get("key1")</span></pre> <h3><span style="font-family:Microsoft YaHei; font-size:18px">移除元素</span></h3> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">map.remove("key1");</span></pre> <h3><span style="font-family:Microsoft YaHei; font-size:18px">清空map</span></h3> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">map.clear();</span></pre> <h2><span style="font-family:Microsoft YaHei; font-size:18px">Map 遍历</span></h2> <h3><span style="font-family:Microsoft YaHei; font-size:18px">初始化数据</span></h3> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); map.put("key1", "value1"); map.put("key2", "value2");</span></pre> <h3><span style="font-family:Microsoft YaHei; font-size:18px">增强for循环遍历<br /></span></h3> <p><span style="font-family:Microsoft YaHei; font-size:18px"><strong>使用keySet()遍历</strong><br /></span></p> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">for (String key : map.keySet()) { 	System.out.println(key + " ：" + map.get(key)); }</span></pre> <p><strong><span style="font-family:Microsoft YaHei; font-size:18px">使用entrySet()遍历</span></strong></p> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) { 	System.out.println(entry.getKey() + " ：" + entry.getValue()); }</span></pre> <h3><span style="font-family:Microsoft YaHei; font-size:18px">迭代器遍历</span></h3> <p><strong><span style="font-family:Microsoft YaHei; font-size:18px">使用keySet()遍历</span></strong></p> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">Iterator&lt;String&gt; iterator = map.keySet().iterator(); while (iterator.hasNext()) { 	String key = iterator.next(); 	System.out.println(key + "　：" + map.get(key)); }</span></pre> <p><strong><span style="font-family:Microsoft YaHei; font-size:18px">使用entrySet()遍历</span></strong></p> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator(); while (iterator.hasNext()) { 	Map.Entry&lt;String, String&gt; entry = iterator.next(); 	System.out.println(entry.getKey() + "　：" + entry.getValue()); }</span></pre> <h3><span style="font-family:Microsoft YaHei; font-size:18px">性能比较<br /></span></h3> <p style="text-indent:0em"><strong><span style="font-family:Microsoft YaHei; font-size:18px">比较方式</span></strong></p> <p style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">分别对四种遍历方式进行10W次迭代，比较用时。</span></p> <p style="text-indent:0em"><strong><span style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">代码</span></span></strong></p> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">package net.xsoftlab.baike;  import java.util.HashMap; import java.util.Iterator; import java.util.Map; import java.util.Map.Entry;  public class TestMap {  	public static void main(String[] args) { 		// 初始化，10W次赋值 		Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); 		for (int i = 0; i &lt; 100000; i++) 			map.put(i, i);  		/** 增强for循环，keySet迭代 */ 		long start = System.currentTimeMillis(); 		for (Integer key : map.keySet()) { 			map.get(key); 		} 		long end = System.currentTimeMillis(); 		System.out.println("增强for循环，keySet迭代 -&gt; " + (end - start) + " ms");  		/** 增强for循环，entrySet迭代 */ 		start = System.currentTimeMillis(); 		for (Entry&lt;Integer, Integer&gt; entry : map.entrySet()) { 			entry.getKey(); 			entry.getValue(); 		} 		end = System.currentTimeMillis(); 		System.out.println("增强for循环，entrySet迭代 -&gt; " + (end - start) + " ms");  		/** 迭代器，keySet迭代 */ 		start = System.currentTimeMillis(); 		Iterator&lt;Integer&gt; iterator = map.keySet().iterator(); 		Integer key; 		while (iterator.hasNext()) { 			key = iterator.next(); 			map.get(key); 		} 		end = System.currentTimeMillis(); 		System.out.println("迭代器，keySet迭代 -&gt; " + (end - start) + " ms");  		/** 迭代器，entrySet迭代 */ 		start = System.currentTimeMillis(); 		Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; iterator1 = map.entrySet().iterator(); 		Map.Entry&lt;Integer, Integer&gt; entry; 		while (iterator1.hasNext()) { 			entry = iterator1.next(); 			entry.getKey(); 			entry.getValue(); 		} 		end = System.currentTimeMillis();  		System.out.println("迭代器，entrySet迭代 -&gt; " + (end - start) + " ms"); 	} }</span></pre> <p style="text-indent:0em"><strong><span style="font-family:Microsoft YaHei; font-size:18px">运行三次，比较结果</span></strong></p> <p style="text-indent:0em"><em><strong><span style="font-family:Microsoft YaHei; font-size:18px">第一次</span></strong></em></p> <pre class="brush:Text"><span style="font-family:Microsoft YaHei; font-size:18px">增强for循环，keySet迭代 -&gt; 37 ms 增强for循环，entrySet迭代 -&gt; 19 ms 迭代器，keySet迭代 -&gt; 14 ms 迭代器，entrySet迭代 -&gt; 9 ms</span></pre> <p><em><strong><span style="font-family:Microsoft YaHei; font-size:18px">第二次</span></strong></em></p> <pre class="brush:Text"><span style="font-family:Microsoft YaHei; font-size:18px">增强for循环，keySet迭代 -&gt; 29 ms 增强for循环，entrySet迭代 -&gt; 22 ms 迭代器，keySet迭代 -&gt; 19 ms 迭代器，entrySet迭代 -&gt; 12 ms</span></pre> <p><strong><em><span style="font-family:Microsoft YaHei; font-size:18px">第三次</span></em></strong></p> <pre class="brush:Text"><span style="font-family:Microsoft YaHei; font-size:18px">增强for循环，keySet迭代 -&gt; 27 ms 增强for循环，entrySet迭代 -&gt; 19 ms 迭代器，keySet迭代 -&gt; 18 ms 迭代器，entrySet迭代 -&gt; 10 ms</span></pre> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px"><em><strong>平均值</strong></em><br /></span></p> <pre class="brush:Text"><span style="font-family:Microsoft YaHei; font-size:18px">增强for循环，keySet迭代 -&gt; 31 ms 增强for循环，entrySet迭代 -&gt; 20 ms 迭代器，keySet迭代 -&gt; 17 ms 迭代器，entrySet迭代 -&gt; 10.33 ms</span></pre> <p style="text-indent:0em"><strong><span style="font-family:Microsoft YaHei; font-size:18px">总结</span></strong></p> <ol class="list-paddingleft-2" style="list-style-type:decimal"> <li> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">增强for循环使用方便，但性能较差，不适合处理超大量级的数据。</span></p> </li> <li> <p><span style="font-family:Microsoft YaHei; font-size:18px">迭代器的遍历速度要比增强for循环快很多，是增强for循环的2倍左右。</span></p> </li> <li> <p style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">使用entrySet遍历的速度要比keySet快很多，是keySet的1.5倍左右。</span></p> </li> </ol> <h2><span style="font-family:Microsoft YaHei; font-size:18px">Map 排序</span></h2> <h3><span style="font-family:Microsoft YaHei; font-size:18px">HashMap、Hashtable、LinkedHashMap排序</span></h3> <p><span style="font-family:Microsoft YaHei; font-size:18px"><strong>注：</strong><br /></span></p> <p style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">TreeMap也可以使用此方法进行排序，但是更推荐下面的方法。</span></p> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); map.put("a", "c"); map.put("b", "b"); map.put("c", "a");  // 通过ArrayList构造函数把map.entrySet()转换成list List&lt;Map.Entry&lt;String, String&gt;&gt; list = new ArrayList&lt;Map.Entry&lt;String, String&gt;&gt;(map.entrySet()); // 通过比较器实现比较排序 Collections.sort(list, new Comparator&lt;Map.Entry&lt;String, String&gt;&gt;() { 	public int compare(Map.Entry&lt;String, String&gt; mapping1, Map.Entry&lt;String, String&gt; mapping2) { 		return mapping1.getKey().compareTo(mapping2.getKey()); 	} });  for (Map.Entry&lt;String, String&gt; mapping : list) { 	System.out.println(mapping.getKey() + " ：" + mapping.getValue()); }</span></pre> <h3><span style="font-family:Microsoft YaHei; font-size:18px">TreeMap排序</span></h3> <p style="text-indent:2em"><span style="font-family:Microsoft YaHei; font-size:18px">TreeMap默认按key进行升序排序，如果想改变默认的顺序，可以使用比较器:</span></p> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">Map&lt;String, String&gt; map = new TreeMap&lt;String, String&gt;(new Comparator&lt;String&gt;() { 	public int compare(String obj1, String obj2) { 		return obj2.compareTo(obj1);// 降序排序 	} }); map.put("a", "c"); map.put("b", "b"); map.put("c", "a");  for (String key : map.keySet()) { 	System.out.println(key + " ：" + map.get(key)); }</span></pre> <h3><span style="font-family:Microsoft YaHei; font-size:18px">按value排序(通用)</span></h3> <pre class="brush:Java"><span style="font-family:Microsoft YaHei; font-size:18px">Map&lt;String, String&gt; map = new TreeMap&lt;String, String&gt;(); 		map.put("a", "c"); 		map.put("b", "b"); 		map.put("c", "a");  		// 通过ArrayList构造函数把map.entrySet()转换成list 		List&lt;Map.Entry&lt;String, String&gt;&gt; list = new ArrayList&lt;Map.Entry&lt;String, String&gt;&gt;(map.entrySet()); 		// 通过比较器实现比较排序 		Collections.sort(list, new Comparator&lt;Map.Entry&lt;String, String&gt;&gt;() { 			public int compare(Map.Entry&lt;String, String&gt; mapping1, Map.Entry&lt;String, String&gt; mapping2) { 				return mapping1.getValue().compareTo(mapping2.getValue()); 			} 		});  		for (String key : map.keySet()) { 			System.out.println(key + " ：" + map.get(key)); 		}</span></pre> <h2 style="text-indent:0em"><span style="font-family:Microsoft YaHei; font-size:18px">常用API</span></h2> <p><span style="font-family:Microsoft YaHei; font-size:18px"><br /></span></p> <table> <tbody> <tr class="firstRow"> <td width="234"><span style="font-family:Microsoft YaHei; font-size:18px">clear()</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">从 Map 中删除所有映射</span></td> </tr> <tr> <td width="234"><span style="font-family:Microsoft YaHei; font-size:18px">remove(Object key)</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">从 Map 中删除键和关联的值</span></td> </tr> <tr> <td width="234"><span style="font-family:Microsoft YaHei; font-size:18px">put(Object key, Object value)</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">将指定值与指定键相关联</span></td> </tr> <tr> <td width="234"><span style="font-family:Microsoft YaHei; font-size:18px">putAll(Map t)</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">将指定 Map 中的所有映射复制到此 map</span></td> </tr> <tr> <td width="234"><span style="font-family:Microsoft YaHei; font-size:18px">entrySet()</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">返回 Map 中所包含映射的 Set 视图。Set 中的每个元素都是一个 Map.Entry 对象，可以使用 getKey() 和 getValue() 方法（还有一个 setValue() 方法）访问后者的键元素和值元素</span></td> </tr> <tr> <td width="234"><span style="font-family:Microsoft YaHei; font-size:18px">keySet()</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">返回 Map 中所包含键的 Set 视图。删除 Set 中的元素还将删除 Map 中相应的映射（键和值）</span></td> </tr> <tr> <td width="234"><span style="font-family:Microsoft YaHei; font-size:18px">values()</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">返回 map 中所包含值的 Collection 视图。删除 Collection 中的元素还将删除 Map 中相应的映射（键和值）</span></td> </tr> <tr> <td width="234"><span style="font-family:Microsoft YaHei; font-size:18px">get(Object key)</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">返回与指定键关联的值</span></td> </tr> <tr> <td width="234"><span style="font-family:Microsoft YaHei; font-size:18px">containsKey(Object key)</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">如果 Map 包含指定键的映射，则返回 true</span></td> </tr> <tr> <td width="234"><span style="font-family:Microsoft YaHei; font-size:18px">containsValue(Object value)</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">如果此 Map 将一个或多个键映射到指定值，则返回 true</span></td> </tr> <tr> <td width="18"><span style="font-family:Microsoft YaHei; font-size:18px">isEmpty()</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">如果 Map 不包含键-值映射，则返回 true</span></td> </tr> <tr> <td width="18"><span style="font-family:Microsoft YaHei; font-size:18px">size()</span></td> <td width="425"><span style="font-family:Microsoft YaHei; font-size:18px">返回 Map 中的键-值映射的数目</span></td> </tr> </tbody> </table> </div> </div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3622.htm">HCNP Routing&amp;Switching之代理ARP</a></p>
                                                <p>下一个：<a href="/html/category/article-3624.htm">java 写文件 权限不够_教你解决Linux系统中JAVA创建文件后权限不足的问题</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3711.htm" title="Java数据结构-栈的实现">Java数据结构-栈的实现</a></li>
                        <li class="py-2"><a href="/html/category/article-3681.htm" title="Spring定时执行@Scheduled从配置文件获取定时">Spring定时执行@Scheduled从配置文件获取定时</a></li>
                        <li class="py-2"><a href="/html/category/article-3705.htm" title="Water 2.6.1 发布，一站式服务治理平台">Water 2.6.1 发布，一站式服务治理平台</a></li>
                        <li class="py-2"><a href="/html/category/article-3683.htm" title="C语言实现BMP格式转RGB格式、YUV格式">C语言实现BMP格式转RGB格式、YUV格式</a></li>
                        <li class="py-2"><a href="/html/category/article-3727.htm" title="vue 实现excel本地预览">vue 实现excel本地预览</a></li>
                        <li class="py-2"><a href="/html/category/article-3726.htm" title="win11系统如何创建虚拟磁盘">win11系统如何创建虚拟磁盘</a></li>
                        <li class="py-2"><a href="/html/category/article-3693.htm" title="@Order的使用与Aop多切面的执行顺序">@Order的使用与Aop多切面的执行顺序</a></li>
                        <li class="py-2"><a href="/html/category/article-3692.htm" title="创建TypeScript代码模板(NVS+Yarn+ESLint+Prettier+Husky)">创建TypeScript代码模板(NVS+Yarn+ESLint+Prettier+Husky)</a></li>
                        <li class="py-2"><a href="/html/category/article-3728.htm" title="Linux  C++  实现一个简易版的ping （也就是ICMP协议）">Linux  C++  实现一个简易版的ping （也就是ICMP协议）</a></li>
                        <li class="py-2"><a href="/html/category/article-3725.htm" title="Linux 搭建NFS文件服务器实现文件共享">Linux 搭建NFS文件服务器实现文件共享</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                    <p>Bolivia Address 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/jquery-3.3.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>