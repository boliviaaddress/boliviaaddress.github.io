<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://boliviaaddress.github.io/html/category/article-3629.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>有关JavaScript事件循环的若干疑问探究 - Bolivia Address</title>
    <link rel="icon" href="/assets/addons/xcblog/img/boliviaaddress/favicon.ico" type="image/x-icon"/>
        <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/boliviaaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?48ec1baacefae763d2c0b3b6955a6c32";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand d-flex align-items-center" href="/">
                        Bolivia Address</a>
                                
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>

                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">有关JavaScript事件循环的若干疑问探究</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h2 id="起因">起因</h2> <p>即使我完全没有系统学习过JavaScript的事件循环机制，在经过一定时间的经验积累后，也听过一些诸如宏任务和微任务、JavaScript是单线程的、Ajax和Promise是一种异步操作、setTimeout会在最后执行等这类的碎片信息，结合实际的代码也可以保证绝大多数情况下代码是按照我希望的顺序执行，但是当我被实际问到这个问题时，发现自己并不能切实地理解这其中的原理，相关的资料有很多，但还是要用自己的理解来表述一遍。</p> <h2 id="为什么要有事件循环">为什么要有事件循环？</h2> <p>首先是个简单的问题，换句话说就是事件循环有什么作用，我为什么要学习这个知识？就像第一段里提到的，众所周知JavaScript是单线程语言，但这并不代表JavaScript不需要异步操作，反向思考一下，如果你所写的所有Ajax操作都是同步的会有什么后果：我们每次向服务端发送请求，整个页面都会因此停滞，直到请求返回，无论响应时间是1毫秒、1秒还是1分钟。对于用户体验来说，这无疑是灾难，所以JavaScript提供了各种异步编程的方式：事件循环、Promise、Generator、Worker等，这里我们还是把目光先聚焦到事件循环上，随着问题的深入，我们会知道事件循环为我们解决了什么问题。</p> <h2 id="事件循环是怎样运作的">事件循环是怎样运作的？</h2> <p>要理解这个问题，推荐先看下这个视频：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.bilibili.com/video/BV1oV411k7XY"  target="_blank" rel="nofollow">到底什么是Event Loop呢？</a>，然后是视频中提到的网站：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://latentflip.com/loupe/?code=c2V0VGltZW91dChmdW5jdGlvbigpIHsNCiAgICBjb25zb2xlLmxvZygnc2V0VGltZW91dCcpOw0KfSkNCg0KbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkgew0KICAgIGNvbnNvbGUubG9nKCdwcm9taXNlJyk7DQp9KS50aGVuKGZ1bmN0aW9uKCkgew0KICAgIGNvbnNvbGUubG9nKCd0aGVuJyk7DQp9KQ0KDQpjb25zb2xlLmxvZygnY29uc29sZScpOw0K!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D"  target="_blank" rel="nofollow">loupe</a>，结合视频我们可以很形象地看到事件是如何在循环中运作的，网站则是根据输入的代码来用动画演示这个过程。</p> <p>顺着视频的思路我们把JavaScript的执行分成几部分：调用栈（Call stack）、事件循环（Event loop）、回调队列（Callback queue）、其他API（Other apis）。</p> <h3 id="调用栈">调用栈</h3> <p>因为JavaScript是单线程的，所以只能一句一句地执行我们的代码，编译器每读到一个函数就把它压入栈中，栈顶的函数返回结果时就弹栈，在这个过程中只有同步函数函数会进入调用栈走正常的执行流程，而<code>setTimeout</code>和<code>Promise</code>这种异步函数则会进入回调队列，形成事件循环的第一步。</p> <h3 id="web-api">Web API</h3> <p>视频中最令我感到意外的是很多我们熟悉的函数并不是JavaScript提供的，而是来自于Web APIs，比如Ajax、DOM、setTimeout等，这些方法的实现并没有出现在V8的源码中，因为它们是由浏览器提供的，更准确地说，应该是运行环境提供的，因为JavaScript的运行环境并不是统一的，不同的浏览器核心就不说了，我们就分成浏览器和Node就可以，看似与我们讨论的事件循环无关，但其中还是存在区别，这个问题我们放在后面说明。</p> <h3 id="任务队列">任务队列</h3> <p>异步方法经过Web API的处理后会进入任务队列，以setTimeout为例就是浏览器提供了一个定时器，当处理这个方法时就在后台启动定时器，达到设定的时间时就将这个方法添加进任务队列，当这一批的同步任务处理完后，JavaScript就会从队列取出方法放入调用栈执行，所以，实际上我们设定的时间是指这个方法<strong>最早</strong>什么时候可以执行，而不是延迟多久执行。我们来看一个例子，可以先脑内运行模拟一下结果：</p> <pre><code class="language-JavaScript">console.log('1')  setTimeout(function setFirstTimeout() {   console.log('2')    new Promise(function (resolve) {     console.log('3')     resolve()   }).then(function () {     console.log('4')   }) },0)  new Promise(function (resolve) {   console.log('5')   resolve() }).then(function () {   console.log('6') })  console.log('7')</code></pre> <p>实际执行一下我们可以得到1、5、7、6、2、3、4这样一个结果，把这段代码放到上文提到的网站里可以很清晰地看到过程，我们定义的<code>setFirstTimeout</code>这一方法经由Web API的处理后进入了Callback Queue，等待主线程的代码执行完，再通过事件循环这一机制进入调用栈。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/cb79a984b95f6f6ae1e4ec94d059c3bc.jpg" alt="有关JavaScript事件循环的若干疑问探究"></p> <p>这样就都说得通了：<code>setTimeout</code>为什么总是在最后执行，但事实真是如此吗？我们看下一个问题。</p> <h2 id="settimeout一定是在所有代码最后执行吗宏任务与微任务">setTimeout一定是在所有代码最后执行吗——宏任务与微任务</h2> <p>即使没有仔细研究过这个问题，根据经验也知道肯定不是这样，虽然setTimeout会相对延迟执行，但并不总是会在所有代码最后执行，这里就涉及一个更大的问题——宏任务与微任务。我们在上文的代码中添加一个DOM操作。</p> <pre><code class="language-JavaScript">console.log('1')  $.on('button','click',function onClick(){     console.log('Clicked'); })  setTimeout(function setFirstTimeout() {   console.log('2')    new Promise(function (resolve) {     console.log('3')     resolve()   }).then(function () {     console.log('4')   }) },0)  new Promise(function (resolve) {   console.log('5')   resolve() }).then(function () {   console.log('6') })  console.log('7')</code></pre> <p>直接看结果，当setTimeout的回调方法进入事件队列后，我点击了绑定了事件的按钮，因此点击的回调方法也进入了事件队列，当同步任务处理完之后，根据队列先入先出的之一原则，setTimeout的回调方法就会先被处理，之后才是点击事件的回调方法。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/edb93b2ea701140b1f350caa6daacbff.jpg" alt="有关JavaScript事件循环的若干疑问探究"></p> <p>不算巧妙的一个例子，但是DOM操作确实与setTimeout同属宏任务这一类别，相对于宏任务的则是微任务，常见分类如下：</p> <p><strong>宏任务</strong></p> <ul> <li>script(整体代码)</li> <li>setTimeout</li> <li>setInterval</li> <li>I/O</li> <li>UI交互事件</li> <li>postMessage</li> <li>MessageChannel</li> <li>setImmediate(Node.js 环境)</li> </ul> <p><strong>微任务</strong></p> <ul> <li>Promise.then</li> <li>Object.observe</li> <li>MutationObserver</li> <li>process.nextTick(Node.js 环境)</li> </ul> <p>其实从上面例子中，应该已经有人发现Promise的执行顺序也不太正常。<code>then</code>中的回调函数既没有跟着<code>Promise</code>执行也没有进入回调队列，这里显然不是程序有Bug，正是因为宏任务与微任务有区别。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/08c523164238570fbbe4dc5e539b9aa1.jpg" alt="有关JavaScript事件循环的若干疑问探究"></p> <p>简单地说，宏任务和微任务各自有着自己的任务队列，执行一个宏任务时，遇到微任务会把它们移到微任务队列中，执行完当前宏任务后再依次执行微任务，让我们把之前的例子再丰富一下：</p> <pre><code class="language-JavaScript">console.log("1");  setTimeout(function s1() {   console.log("2");   process.nextTick(function p2() {     console.log("3");   });   new Promise(function (resolve) {     console.log("4");     resolve();   }).then(function t2() {     console.log("5");   }); }); process.nextTick(function p1() {   console.log("6"); }); new Promise(function (resolve) {   console.log("7");   resolve(); }).then(function t1() {   console.log("8"); });  console.log("9");  setTimeout(function s2() {   console.log("10");   process.nextTick(function () {     console.log("11");   });   new Promise(function (resolve) {     console.log("12");     resolve();   }).then(function () {     console.log("13");   }); });</code></pre> <p>以v16版本的node环境执行结果是：1、7、9、6、8、2、4、3、5、10、12、11、13，其他环境会有差异，我们放在后面说，先看眼前的问题，以<code>process.nextTick</code>是微任务为前提来分析。</p> <ol> <li>执行<code>console.log(1)</code></li> <li>遇到宏任务<code>setTimeout</code>s1，将其添加进<strong>Callback Queue</strong></li> <li>遇到微任务<code>process.nextTick</code>p1，将其添加进<strong>Task Queue</strong></li> <li>执行<code>new Promise</code>中的<code>console.log(7)</code></li> <li>将微任务<code>then</code>t1添加进<strong>Task Queue</strong></li> <li>执行<code>console.log(9)</code></li> <li>遇到宏任务<code>setTimeout</code>s2，将其添加进<strong>Callback Queue</strong></li> </ol> <p>全局的宏任务执行完我们可以得到这样两个队列，和1、7、9的输出，按规则接下来执行这个宏任务中的微任务p1和t1，得到6和8。</p> <table> <thead> <tr> <th>Callback Queue</th> <th>Task Queue</th> </tr> </thead> <tbody> <tr> <td>s1</td> <td>p1</td> </tr> <tr> <td>s2</td> <td>t1</td> </tr> </tbody> </table> <p>继续下一个宏任务s1：</p> <ol> <li>执行<code>console.log(2)</code></li> <li>遇到微任务<code>process.nextTick</code>p2，将其添加进<strong>Task Queue</strong></li> <li>执行<code>new Promise</code>中的<code>console.log(4)</code></li> <li>将微任务<code>then</code>t2添加进<strong>Task Queue</strong></li> </ol> <table> <thead> <tr> <th>Task Queue</th> </tr> </thead> <tbody> <tr> <td>p2</td> </tr> <tr> <td>t2</td> </tr> </tbody> </table> <p>因此，接下来的输出是：2、4、3、5，以此类推，后面的都是差不多的规则，不一一赘述。</p> <h2 id="node与浏览器的eventloop有什么差异">Node与浏览器的EventLoop有什么差异？</h2> <p>上一个问题应该算是解决了，但也引出了一个新问题，之前我提到是以v16版本的node环境来执行，那么如果不是v16版本的node甚至不用node来运行会有什么结果呢？在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/6844903512845860872"  target="_blank" rel="nofollow">这一次，彻底弄懂 JavaScript 执行机制</a>这篇文章的评论区我看到了一些讨论，v10之前的node在事件循环的处理上与浏览器不同，所以得到了另外的结果，我切换到v10的版本后，得到的还是1、7、9、6、8、2、4、3、5、10、12、11、13这样的结果，个人觉得这里以最新版本为准就好了，不打算深究，有兴趣的可以看下那篇文章的评论区。</p> <p>然后是另一种情况，最开始我是在Vue中验证这段代码的，得到的结果是1、7、9、8、2、4、5、6、10、12、13、3、11，如果是在<code>process.nextTick</code>是宏任务的前提下，这个结果就是正确的，但是这里我不太清楚为什么。另外我想到了Vue中也有一个nextTick方法，查了一下发现又是一个不同的课题，限于篇幅打算另开一篇来学习，具体的内容也可以看下这篇博客<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/6875492931726376974"  target="_blank" rel="nofollow">Vue的nextTick具体是微任务还是宏任务?</a></p> <h2 id="还有什么问题">还有什么问题？</h2> <p>写这一篇博客本来是想弄懂事件循环这一机制的，没想到里面的内容那么多，在我刚上班的时候，遇到过一个问题<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/LFeather/p/10853169.html"  target="_blank" rel="nofollow">JavaScript定时器越走越快的问题</a>，当时我是以为把这个问题搞清楚了，从今天这篇文章的角度回头来看那时候仅仅看到了冰山一角，这篇文章也同样只是写到了事件循环的冰山一角，好在现在我知道这件事了，除了Vue的nextTick这一问题外，还有一个渲染的问题与事件循环相关，之后也会将这部分内容整理成文章，这里先推荐一篇博客和一个视频：</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/6844904165462769678"  target="_blank" rel="nofollow">深入解析你不知道的 EventLoop 和浏览器渲染、帧动画、空闲回调（动图演示）</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.bilibili.com/video/BV1a4411F7t7"  target="_blank" rel="nofollow">深入事件环(In The Loop)</a></p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3628.htm">Vue3中如何使用ref获取元素节点全面解析</a></p>
                                                <p>下一个：<a href="/html/category/article-3630.htm">模拟器 教你如何用python制作随机点名器</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3687.htm" title="Pandas大数据量内存优化">Pandas大数据量内存优化</a></li>
                        <li class="py-2"><a href="/html/category/article-3691.htm" title="中文时间日期解析错误-UnicodeEncodeError: &#8216;locale&#8217; codec can&#8217;t encode character &#8216;\u5e74&#8217; in position 2: Illegal">中文时间日期解析错误-UnicodeEncodeError: &#8216;locale&#8217; codec can&#8217;t encode character &#8216;\u5e74&#8217; in position 2: Illegal</a></li>
                        <li class="py-2"><a href="/html/category/article-3710.htm" title="FUNCTION XXX does not exist">FUNCTION XXX does not exist</a></li>
                        <li class="py-2"><a href="/html/category/article-3708.htm" title="Windows下如何优雅的管理多个python版本以及简易安装相关库（包括机器学习和PyQt）">Windows下如何优雅的管理多个python版本以及简易安装相关库（包括机器学习和PyQt）</a></li>
                        <li class="py-2"><a href="/html/category/article-3722.htm" title="MyBatis:SQL语句中的foreach标签的详细介绍">MyBatis:SQL语句中的foreach标签的详细介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-3704.htm" title="微服务架构-分布式服务中,Feign请求拦截器实现日志链路的跟踪">微服务架构-分布式服务中,Feign请求拦截器实现日志链路的跟踪</a></li>
                        <li class="py-2"><a href="/html/category/article-3720.htm" title="Git回退代码到指定版本方法">Git回退代码到指定版本方法</a></li>
                        <li class="py-2"><a href="/html/category/article-3683.htm" title="C语言实现BMP格式转RGB格式、YUV格式">C语言实现BMP格式转RGB格式、YUV格式</a></li>
                        <li class="py-2"><a href="/html/category/article-3688.htm" title="设计模式学习笔记装饰器模式及其应用详解">设计模式学习笔记装饰器模式及其应用详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3717.htm" title="Python－常用模块有哪些">Python－常用模块有哪些</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                    <p>Bolivia Address 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/jquery-3.3.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>