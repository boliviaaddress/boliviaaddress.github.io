<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://boliviaaddress.github.io/html/category/article-3687.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Pandas大数据量内存优化 - Bolivia Address</title>
    <link rel="icon" href="/assets/addons/xcblog/img/boliviaaddress/favicon.ico" type="image/x-icon"/>
        <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/boliviaaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?48ec1baacefae763d2c0b3b6955a6c32";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand d-flex align-items-center" href="/">
                        Bolivia Address</a>
                                
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>

                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">Pandas大数据量内存优化</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="htmledit_views"> <h2>一、背景介绍</h2> <p>Pandas在处理大数据(尤其是<strong>列比较多</strong>的场景)时，如果不做优化，内存占用还是很大的，下面通过一个实例来说明可以怎样优化</p> <blockquote> <p>首先，生成一批18万的数据，每条数据151列</p> </blockquote> <pre><code class="language-python">import pandas as pd import numpy as np   def gen_big_data(csv_file: str, big_data_count=90000):     chars = 'abcdefghijklmnopqrstuvwxyz'     dates = pd.date_range(start='2020-01-01', periods=big_data_count, freq='30s')     big_data_cols = ['Name']     for group in range(1, 31):         big_data_cols.extend([f'date str {group}',                               f'bool {group}',                               f'int {group}',                               f'float {group}',                               f'str {group}'])     big_data = []     for i in range(0, big_data_count):         row = [f'Name Item {(i + 1)}']         for _ in range(0, 30):             row.extend([str(dates[i]),                         i % 2 == 0,                         np.random.randint(10000, 100000),                         10000 * np.random.random(),                         chars[np.random.randint(0, 26)] * 15])         big_data.append(row)     df = pd.DataFrame(data=big_data, columns=big_data_cols)     df.to_csv(csv_file, index=None)   if __name__ == '__main__':     # 修改存放路径以及模拟数据量(默认9万)     gen_big_data('./files/custom_big_data.csv', 180000)</code></pre> <p>查看生成的数据格式，可以看到每一行有151列</p> <p style="text-align:center;"><img decoding="async" alt="143e6764f47d47c9a67d2353fea292bd.png" src="http://img.555519.xyz/uploads/20221230/4bfdd81e239be8be9ad57420d6ff2158.jpg"></p> <blockquote> <p>保存数据后，先查看一下内存占用情况</p> </blockquote> <pre><code class="language-python">import pandas as pd   def info_memory(csv_file: str):     df = pd.read_csv(csv_file)     print(df.info(memory_usage='deep'))   if __name__ == '__main__':     info_memory('./files/custom_big_data.csv')</code></pre> <p>打印结果如下，可以看到当前内存占用为<strong>862.1MB</strong></p> <pre><code class="language-bash"><class 'pandas.core.frame.DataFrame'> RangeIndex: 180000 entries, 0 to 179999 Columns: 151 entries, Name to str 30 dtypes: bool(30), float64(30), int64(30), object(61) memory usage: 862.1 MB</code></pre> <blockquote> <p>查看不同类型的内存占用情况&nbsp;</p> </blockquote> <pre><code class="language-bash">def info_memory_by_d_type(csv_file: str):     df = pd.read_csv(csv_file)     for d_type in ['bool', 'float64', 'int64', 'object']:         d_type_selected = df.select_dtypes(include=[d_type])         mem_mean_bit = d_type_selected.memory_usage(deep=True).mean()         mem_mean_mb = mem_mean_bit / 1024 ** 2         print(f'mean memory usage: {d_type:<7} - {mem_mean_mb:.3f} M')</code></pre> <p>输出结果如下，其中object类型占用内存最多</p> <pre><code class="language-bash">mean memory usage: bool    - 0.166 M mean memory usage: float64 - 1.329 M mean memory usage: int64   - 1.329 M mean memory usage: object  - 12.494 M</code></pre> <h2>二、优化方案</h2> <blockquote> <p>查看某个类型的内存占用量</p> </blockquote> <pre><code class="language-python">def info_mem_usage_mb(pd_obj):     if isinstance(pd_obj, pd.DataFrame):         mem_usage = pd_obj.memory_usage(deep=True).sum()     else:         mem_usage = pd_obj.memory_usage(deep=True)     # 转换为MB返回     return f'{mem_usage / 1024 ** 2:02.3f} MB'</code></pre> <blockquote> <p>int和float类型</p> </blockquote> <p>对于int和float类型的数据，Pandas加载到内存中的数据，默认是int64和float64。一般场景下的数据，用int32和float32就足够了，用<strong>numpy.iinfo</strong>和<strong>numpy.finfo</strong>可以打印对应类型的取值范围</p> <pre><code class="language-bash">Machine parameters for int32 --------------------------------------------------------------- min = -2147483648 max = 2147483647 ---------------------------------------------------------------  Machine parameters for int64 --------------------------------------------------------------- min = -9223372036854775808 max = 9223372036854775807 ---------------------------------------------------------------</code></pre> <pre><code class="language-bash">Machine parameters for float32 --------------------------------------------------------------- ... maxexp =    128   max =        3.4028235e+38 nexp =        8   min =        -max ---------------------------------------------------------------  Machine parameters for float64 --------------------------------------------------------------- ... maxexp =   1024   max =        1.7976931348623157e+308 nexp =       11   min =        -max ---------------------------------------------------------------</code></pre> <p>分别优化int和float的类型</p> <pre><code class="language-python">def optimize_int_and_float():     df_int = df.select_dtypes(include=['int64'])     df_int_converted = df_int.apply(pd.to_numeric, downcast='unsigned')     df_float = df.select_dtypes(include=['float64'])     df_float_converted = df_float.apply(pd.to_numeric, downcast='float')      print('int before     ', info_mem_usage_mb(df_int))     print('int converted  ', info_mem_usage_mb(df_int_converted))      print('float before   ', info_mem_usage_mb(df_float))     print('float converted', info_mem_usage_mb(df_float_converted))</code></pre> <p>优化后的结果如下，内存减少50%左右</p> <pre><code class="language-bash">int before      41.199 MB int converted   20.599 MB float before    41.199 MB float converted 20.599 MB</code></pre> <blockquote> <p>object类型中的普通str数据</p> </blockquote> <p>获取object类型数据，并调用describe()展示统计信息</p> <p style="text-align:center;"><img decoding="async" alt="5d183c5325314e73be43a2976fd1d21d.png" src="http://img.555519.xyz/uploads/20221230/701f3def7461521ce01d54cb503287e9.jpg"></p> <p>&nbsp;对于区分度较低的 str 1到str 30，一共只有26个可能的值，可以考虑转换为Pandas中的<strong>categroy</strong>类型，这里将区分度小于40%的列转换为category类型</p> <pre><code class="language-python">def optimize_obj():     df_obj = df.select_dtypes(include=['object'])     df_obj_converted = pd.DataFrame()     for col in df_obj.columns:         unique_count = len(df_obj[col].unique())         total_count = len(df_obj[col])         # 将区分度小于40%的列转换为category类型         if unique_count / total_count <= 0.4:             df_obj_converted.loc[:, col] = df_obj[col].astype('category')         else:             df_obj_converted.loc[:, col] = df_obj[col]      print('object before   ', info_mem_usage_mb(df_obj))     print('object converted', info_mem_usage_mb(self.df_obj_converted))</code></pre> <p>执行结果如下，降低了300+M的内存</p> <pre><code class="language-python">object before    774.602 MB object converted 409.047 MB</code></pre> <blockquote> <p>object类型中的date数据</p> </blockquote> <pre><code class="language-python">def optimize_date_str():     df_date = pd.DataFrame()     df_date_converted = pd.DataFrame()     for col_name in df.columns:         if col_name.startswith('date str'):             df_date.loc[:, col_name] = df[col_name]             df_date_converted.loc[:, col_name] = pd.to_datetime(df[col_name])      print('date before   ', info_mem_usage_mb(df_date))     print('date converted', info_mem_usage_mb(df_date_converted))</code></pre> <p>执行结果如下，也降低了300+M的内存</p> <pre><code class="language-bash">date before    391.388 MB date converted 41.199 MB</code></pre> <h2>三、总体优化</h2> <p>综合以上的优化方法，并封装为类PandasMemoryOptimizeDemo</p> <pre><code class="language-bash">import pandas as pd import numpy as np   class PandasMemoryOptimizeDemo:     df: pd.DataFrame     df_int_converted: pd.DataFrame     df_float_converted: pd.DataFrame     df_obj_converted: pd.DataFrame     df_date_converted: pd.DataFrame      def __init__(self, csv_file: str):         self.csv_file = csv_file         self.df = pd.read_csv(self.csv_file)           @staticmethod     def info_mem_usage_mb(pd_obj):         if isinstance(pd_obj, pd.DataFrame):             mem_usage = pd_obj.memory_usage(deep=True).sum()         else:             mem_usage = pd_obj.memory_usage(deep=True)         # 转换为MB返回         return f'{mem_usage / 1024 ** 2:02.3f} MB'           def optimize_int_and_float(self):         df_int = self.df.select_dtypes(include=['int64'])         self.df_int_converted = df_int.apply(pd.to_numeric, downcast='unsigned')         df_float = self.df.select_dtypes(include=['float64'])         self.df_float_converted = df_float.apply(pd.to_numeric, downcast='float')          print('int before     ', self.info_mem_usage_mb(df_int))         print('int converted  ', self.info_mem_usage_mb(self.df_int_converted))          print('float before   ', self.info_mem_usage_mb(df_float))         print('float converted', self.info_mem_usage_mb(self.df_float_converted))      def optimize_obj(self):         df_obj = self.df.select_dtypes(include=['object'])         self.df_obj_converted = pd.DataFrame()         for col in df_obj.columns:             unique_count = len(df_obj[col].unique())             total_count = len(df_obj[col])             # 将区分度小于40%的列转换为category类型             if unique_count / total_count <= 0.4:                 self.df_obj_converted.loc[:, col] = df_obj[col].astype('category')             else:                 self.df_obj_converted.loc[:, col] = df_obj[col]          print('object before   ', self.info_mem_usage_mb(df_obj))         print('object converted', self.info_mem_usage_mb(self.df_obj_converted))      def optimize_date_str(self):         df_date = pd.DataFrame()         self.df_date_converted = pd.DataFrame()         for col_name in self.df.columns:             if col_name.startswith('date str'):                 df_date.loc[:, col_name] = self.df[col_name]                 self.df_date_converted.loc[:, col_name] = pd.to_datetime(self.df[col_name])          print('date before   ', self.info_mem_usage_mb(df_date))         print('date converted', self.info_mem_usage_mb(self.df_date_converted))      def optimize_all(self):         self.optimize_int_and_float()         self.optimize_obj()         self.optimize_date_str()          df_converted = self.df.copy()         df_converted[self.df_int_converted.columns] = self.df_int_converted         df_converted[self.df_float_converted.columns] = self.df_float_converted         df_converted[self.df_obj_converted.columns] = self.df_obj_converted         df_converted[self.df_date_converted.columns] = self.df_date_converted          print('before   ', self.info_mem_usage_mb(self.df))         print('converted', self.info_mem_usage_mb(df_converted))   if __name__ == '__main__':     optimize_demo = PandasMemoryOptimizeDemo('./files/custom_big_data.csv')     optimize_demo.optimize_all()</code></pre> <p>执行结果如下，优化效果还是很明显的</p> <pre><code class="language-bash">before    862.149 MB converted 105.207 MB</code></pre> <h2>四、直接优化read_csv方法</h2> <p>写代码的过程中，如果每次都按照这样的步骤，其实还是很繁琐，那能不能在调用read_csv方法时就进行优化呢？</p> <p>接下来就一起来探索一下</p> <p>在PyCharm中，点击read_csv进入源码，发现该方法提供了非常丰富的参数(50+)，这里只列举需要的参数</p> <pre><code class="language-python">def read_csv(     filepath_or_buffer: FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str],     # General Parsing Configuration     dtype: DtypeArg | None = None,     converters=None,     # Datetime Handling     parse_dates=None,     infer_datetime_format=False,     keep_date_col=False,     date_parser=None,     low_memory=_c_parser_defaults["low_memory"],     memory_map=False,     storage_options: StorageOptions = None, ):     # locals() should never be modified     kwds = locals().copy()</code></pre> <p>可以直接指定dtype和parse_dates，最终代码如下</p> <pre><code class="language-python">def big_data_optimized_read_csv(self):     d_type_dict = {}     date_indexes = []     for i in range(1, 31):         d_type_dict[f'int {i}'] = 'int32'         d_type_dict[f'float {i}'] = 'float32'         d_type_dict[f'str {i}'] = 'category'          date_indexes.append(5 * (i - 1) + 1)     self.df = pd.read_csv(self.csv_file, dtype=d_type_dict, parse_dates=date_indexes)     print('optimized read_csv: ', self.info_mem_usage_mb(self.df))</code></pre> <p>执行结果如下，内存占用也大大降低了</p> <pre><code class="language-bash">optimized read_csv:  105.207 MB</code></pre> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3686.htm">Springboot之请求映射</a></p>
                                                <p>下一个：<a href="/html/category/article-3688.htm">设计模式学习笔记装饰器模式及其应用详解</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-5952.htm" title="喵咪驱虫怎么做的（猫驱虫使用方法）">喵咪驱虫怎么做的（猫驱虫使用方法）</a></li>
                        <li class="py-2"><a href="/html/category/article-7375.htm" title="全国宠物领养 全国宠物领养中心官网">全国宠物领养 全国宠物领养中心官网</a></li>
                        <li class="py-2"><a href="/html/category/article-6593.htm" title="宠物领养市场需求分析 宠物领养市场需求分析报告">宠物领养市场需求分析 宠物领养市场需求分析报告</a></li>
                        <li class="py-2"><a href="/html/category/article-7006.htm" title="腊肉的做法大全（腊肉的做法大全家常菜）">腊肉的做法大全（腊肉的做法大全家常菜）</a></li>
                        <li class="py-2"><a href="/html/category/article-5594.htm" title="新手开宠物店需要了解哪些知识点（新手开宠物店需要了解哪些知识点和技能）">新手开宠物店需要了解哪些知识点（新手开宠物店需要了解哪些知识点和技能）</a></li>
                        <li class="py-2"><a href="/html/category/article-5979.htm" title="动物疫苗价格表图片大全大图高清 动物疫苗价格表图片大全大图高清版">动物疫苗价格表图片大全大图高清 动物疫苗价格表图片大全大图高清版</a></li>
                        <li class="py-2"><a href="/html/category/article-7466.htm" title="动物诊所英语怎么读（动物诊所英语怎么读的）">动物诊所英语怎么读（动物诊所英语怎么读的）</a></li>
                        <li class="py-2"><a href="/html/category/article-7053.htm" title="猫体外驱虫药多久能杀死跳蚤（做完驱虫三天了还有跳蚤）">猫体外驱虫药多久能杀死跳蚤（做完驱虫三天了还有跳蚤）</a></li>
                        <li class="py-2"><a href="/html/category/article-7467.htm" title="动物疫苗多少钱一只啊图片视频（动物疫苗要打几针）">动物疫苗多少钱一只啊图片视频（动物疫苗要打几针）</a></li>
                        <li class="py-2"><a href="/html/category/article-6822.htm" title="中国知名兽药（中国知名兽药公司排名）">中国知名兽药（中国知名兽药公司排名）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                    <p>Bolivia Address 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/jquery-3.3.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>