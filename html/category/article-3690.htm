<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://boliviaaddress.github.io/html/category/article-3690.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>springboot集成Elasticsearch实现各种搜索功能 - Bolivia Address</title>
    <link rel="icon" href="/assets/addons/xcblog/img/boliviaaddress/favicon.ico" type="image/x-icon"/>
        <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/boliviaaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?48ec1baacefae763d2c0b3b6955a6c32";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand d-flex align-items-center" href="/">
                        Bolivia Address</a>
                                
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>

                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">springboot集成Elasticsearch实现各种搜索功能</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>springboot集成Elasticsearch各类搜索功能实现</h3> <ul> <li> <ul> <li>springboot集成Elasticsearch使用completion suggest实现自动关键字补全</li> <li> <ul> <li>建立学生的索引和映射：</li> <li>开始测试：</li> <li>接下来是实现获取suggest的代码：</li> <li>前端代码</li> </ul> </li> <li>实现Fuzzy模糊查询</li> <li> <ul> <li>es中的Fuzzy查询语句示例</li> <li>Java实现Fuzzy和高亮返回</li> </ul> </li> <li>数组元素查询</li> <li>Elasticsearch许可证过期</li> </ul> </li> </ul> </div> <p>环境准备：<br /> Elasticsearch服务器<br />ik中文分词器<br />Kibana服务<br />一个集成了ES的springboot项目</p> <p>博主环境：<br /> es:6.2.2 Kibana:6.2.2 springboot:2.1.2</p> <h2>springboot集成Elasticsearch使用completion suggest实现自动关键字补全</h2> <p>定义成completion的字段无法应用highlight返回。</p> <p>实现目标：建立学生数据索引，以学生姓名为搜索自动补全字段。<br /> 学生实体类：</p> <pre><code>@Document(indexName = "student_index",type="student") public class Student implements Serializable {     @Id     @Field(type= FieldType.Auto)     private String studentId;      @Override     public String toString() {         return "Student{" +                 "studentId='" + studentId + '\'' +                 ", name='" + name + '\'' +                 ", age=" + age +                 ", scores=" + scores +                 '}';     }      public Student(String studentId, String name, Integer age, List<Double> scores) {         this.studentId = studentId;         this.name = name;         this.age = age;         this.scores = scores;     }      public Student() {      }      public String getStudentId() {          return studentId;     }      public void setStudentId(String studentId) {         this.studentId = studentId;     }      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     }      public Integer getAge() {         return age;     }      public void setAge(Integer age) {         this.age = age;     }      public List<Double> getScores() {         return scores;     }      public void setScores(List<Double> scores) {         this.scores = scores;     }      @Field(type=FieldType.Auto)     private String name;      @Field(type=FieldType.Auto)     private Integer age;      @Field(type=FieldType.Auto)     private List<Double> scores; }</code></pre> <h3>建立学生的索引和映射：</h3> <p>待搜索的字段需要设置为Completion类型</p> <pre><code>PUT /student_index {    "mappings": {      "student" : {        "properties" : {          "name" : {            "type" :    "completion",            "analyzer": "ik_smart"          },          "age" : {            "type" :   "integer"          },                  "studentId" : {            "type" :   "text"          },                  "scores":{           "type" :  "float"                    }               }      }    }  }</code></pre> <p>整点数据测试一下：</p> <p>学生索引Repository类：</p> <pre><code>@Repository public interface StudentRepository extends ElasticsearchCrudRepository<Student,String>{ }</code></pre> <h3>开始测试：</h3> <p>在程序里插入一些数据；</p> <pre><code>@Autowired 	private ElasticsearchTemplate elasticsearchTemplate; 	@Test 	public void contextLoads() {  		List scores= new ArrayList<>(); 		scores.add(67.2); 		scores.add(27.2); 		scores.add(56.2);  /*		studentIndexRepository.save(new Student(UUID.randomUUID().toString(), "张三", 21, scores )); 		studentIndexRepository.save(new Student(UUID.randomUUID().toString(), "李四", 35, scores )); 		studentIndexRepository.save(new Student(UUID.randomUUID().toString(), "王二", 45, scores )); 		studentIndexRepository.save(new Student(UUID.randomUUID().toString(), "张大林", 23, scores )); 		studentIndexRepository.save(new Student(UUID.randomUUID().toString(), "王大力", 51, scores ));*/  		studentIndexRepository.save(new Student(UUID.randomUUID().toString(), "刘伯", 21, scores )); 		studentIndexRepository.save(new Student(UUID.randomUUID().toString(), "刘思想", 35, scores )); 		studentIndexRepository.save(new Student(UUID.randomUUID().toString(), "王皮皮", 45, scores )); 		studentIndexRepository.save(new Student(UUID.randomUUID().toString(), "王二丫", 23, scores )); 		studentIndexRepository.save(new Student(UUID.randomUUID().toString(), "王铁蛋", 51, scores )); 	}</code></pre> <p>在Kibana测试</p> <pre><code>POST /student_index/completion/_search { "size": 0,   "suggest": {     "name-suggest": {       "prefix": "王二",       "completion": {         "field": "name"       }     }   } }</code></pre> <p>结果正确：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/ab6e838b33915775974df47d91375501.jpg" alt="springboot集成Elasticsearch实现各种搜索功能"></p> <h3>接下来是实现获取suggest的代码：</h3> <p>测试方法</p> <pre><code>	@Test 	public void testSuggestCompletionProc() {  		String suggestField="name";//指定在哪个字段搜索 		String suggestValue="王二";//输入的信息 		Integer suggestMaxCount=10;//获得最大suggest条数  		CompletionSuggestionBuilder suggestionBuilderDistrict = new CompletionSuggestionBuilder(suggestField).prefix(suggestValue).size(suggestMaxCount); 		SuggestBuilder suggestBuilder = new SuggestBuilder(); 		suggestBuilder.addSuggestion("student_suggest", suggestionBuilderDistrict);//添加suggest  		//设置查询builder的index,type,以及建议 		SearchRequestBuilder requestBuilder = this.elasticsearchTemplate.getClient().prepareSearch("student_index").setTypes("student").suggest(suggestBuilder); 		System.out.println(requestBuilder.toString());  		SearchResponse response = requestBuilder.get(); 		Suggest suggest = response.getSuggest();//suggest实体  		Set<String> suggestSet = new HashSet<>();//set 		int maxSuggest = 0; 		if (suggest != null) { 			Suggest.Suggestion result = suggest.getSuggestion("student_suggest");//获取suggest,name任意string 			for (Object term : result.getEntries()) {  				if (term instanceof CompletionSuggestion.Entry) { 					CompletionSuggestion.Entry item = (CompletionSuggestion.Entry) term; 					if (!item.getOptions().isEmpty()) { 						//若item的option不为空,循环遍历 						for (CompletionSuggestion.Entry.Option option : item.getOptions()) { 							String tip = option.getText().toString(); 							if (!suggestSet.contains(tip)) { 								suggestSet.add(tip); 								++maxSuggest; 							} 						} 					} 				} 				if (maxSuggest >= suggestMaxCount) { 					break; 				} 			} 		}  		List<String> suggests = Arrays.asList(suggestSet.toArray(new String[]{}));  		suggests.forEach((s)->{ 			System.out.println(s); 		});  //		return	 suggests;  	}</code></pre> <p>输出结果正确：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/ee1cbeab7bcb6334581fc1b4b736aa17.jpg" alt="springboot集成Elasticsearch实现各种搜索功能"><br /> 封装的工具方法</p> <pre><code>    /**      * completion suggest      * @param suggestField      * @param suggestValue      * @param suggestMaxCount      * @param index_      * @param indexType_      * @param elasticsearchTemplate__      * @return      */     public List<String> listSuggestCompletion(String suggestField, String suggestValue, Integer suggestMaxCount,String index_,String indexType_,ElasticsearchTemplate elasticsearchTemplate__) {         /* String suggestField="name";//指定在哪个字段搜索         String suggestValue="王二";//输入的信息         Integer suggestMaxCount=10;//获得最大suggest条数*/          CompletionSuggestionBuilder suggestionBuilderDistrict = new CompletionSuggestionBuilder(suggestField).prefix(suggestValue).size(suggestMaxCount);         SuggestBuilder suggestBuilder = new SuggestBuilder();         suggestBuilder.addSuggestion("student_suggest", suggestionBuilderDistrict);//添加suggest          //设置查询builder的index,type,以及建议         if(elasticsearchTemplate__==null)             System.out.println( "this is Template null  ***************************************************");         SearchRequestBuilder requestBuilder = elasticsearchTemplate__.getClient().prepareSearch(index_).setTypes(indexType_).suggest(suggestBuilder);         System.out.println(requestBuilder.toString());          SearchResponse response = requestBuilder.get();         Suggest suggest = response.getSuggest();//suggest实体          Set<String> suggestSet = new HashSet<>();//set         int maxSuggest = 0;         if (suggest != null) {             Suggest.Suggestion result = suggest.getSuggestion("student_suggest");//获取suggest,name任意string             for (Object term : result.getEntries()) {                  if (term instanceof CompletionSuggestion.Entry) {                     CompletionSuggestion.Entry item = (CompletionSuggestion.Entry) term;                     if (!item.getOptions().isEmpty()) {                         //若item的option不为空,循环遍历                         for (CompletionSuggestion.Entry.Option option : item.getOptions()) {                             String tip = option.getText().toString();                             if (!suggestSet.contains(tip)) {                                 suggestSet.add(tip);                                 ++maxSuggest;                             }                         }                     }                 }                 if (maxSuggest >= suggestMaxCount) {                     break;                 }             }         }          List<String> suggests = Arrays.asList(suggestSet.toArray(new String[]{}));          suggests.forEach((s)->{             System.out.println(s);         });  		return	 suggests;      }</code></pre> <h3>前端代码</h3> <p>前端自动补全用JqueryUI的autocomplete组件。</p> <pre><code><script>      var availableTags = new Array();      $(function() {          $("#tags").autocomplete({             source: availableTags          });     });      $(document).ready(function() {         $("#tags").bind("input propertychange", function () {             $("#valuetext").html($(this).val());             $.get("searchSuggest?value="+$(this).val(), function (data, status) {                 var results=data;                 for(var i=0;i<results.length;i++){                     availableTags[i]=results[i].texts;                 }                  $("#tags").autocomplete({                     source: availableTags                  });             });         });     }) </script>  <!-- 标签 -->             <input type="search" id="tags" name="searchvalue" class="form-control" style="border-radius: 50px 0 0 50px;" placeholder="请搜索.."></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/0ec89142ea2c5b957112f06e7892b8ea.jpg" alt="springboot集成Elasticsearch实现各种搜索功能"></p> <hr/> <h2>实现Fuzzy模糊查询</h2> <p>Fuzzy有纠错功能<br /> 应用Fuzzy查询的字段需要是 text 类型的。</p> <h3>es中的Fuzzy查询语句示例</h3> <pre><code>GET /indextest/testmapping/_search/ {   "query": {     "fuzzy": {       "namePinyin": {         "value": "zhonghuarenmingonghegu"       }      }    } ,   "highlight" :{     "fields": {       "namePinyin" :{}     }   } }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/4cf3e51cb07104fc616a09da2798b4e2.jpg" alt="springboot集成Elasticsearch实现各种搜索功能"></p> <h3>Java实现Fuzzy和高亮返回</h3> <pre><code>    /**      * 拼音Fuzzy查询      * @param field      * @param value      * @param highlightField      * @param preTag      * @param postTag      * @param index      * @param indexType      * @param elasticsearchTemplate      * @return      */     public List<String> listSearchByPinyin(String field,String value,String highlightField ,String preTag,String postTag,String index, String indexType , ElasticsearchTemplate elasticsearchTemplate){          List<String> result = new LinkedList<>();          FuzzyQueryBuilder queryBuilder = QueryBuilders.fuzzyQuery(field, value)                 .fuzziness(Fuzziness.TWO)                 .prefixLength(0)                 .maxExpansions(10);         HighlightBuilder highlightBuilder = new HighlightBuilder();         highlightBuilder.field(highlightField);         highlightBuilder.preTags(preTag);         highlightBuilder.postTags(postTag);          SearchRequestBuilder requestBuilder = elasticsearchTemplate.getClient().prepareSearch(index)                 .setTypes(indexType)                 .setQuery(queryBuilder)                 .highlighter(highlightBuilder);           SearchResponse response = requestBuilder.get();          System.out.println(response.getClusters().toString());          System.out.println(requestBuilder.toString());          SearchHits searchHits = response.getHits();          searchHits.forEach(i->{             System.out.println(i.getIndex());             System.out.println(i.getId());             System.out.println(i.getSourceAsString());               Text highlightFragment = i.getHighlightFields().get(highlightField).getFragments()[0];              result.add(highlightFragment.toString());              System.out.println();          });           return result;     }</code></pre> <h2>数组元素查询</h2> <p>这个可以用作标签查询、定位。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/8d70e731a823bb7bb8e67537abbebe67.jpg" alt="springboot集成Elasticsearch实现各种搜索功能"></p> <h2>Elasticsearch许可证过期</h2> <p>elasticsearch报日志：</p> <blockquote> <p>org.elasticsearch.ElasticsearchSecurityException: current license is<br /> non-compliant for [security]</p> </blockquote> <p>替换许可证</p> <p>到elastic**官网**<code>https://register.elastic.co/</code>注册一下账号，注册邮箱会收到许可证文件<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/56dac0da64654db739663c16ba91fa97.jpg" alt="springboot集成Elasticsearch实现各种搜索功能"><br /> 将许可证放到服务器下，用的docker要进入到es容器内，重命名许可证文件名为：<code>license.json</code></p> <pre><code class="prism language-c"><span class="token macro property"># curl -XPUT -u elastic:yourregistername 'http://133.3.269.211:9200/_xpack/license?acknowledge=true' -H "Content-Type: application/json" -d @license.json</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/e82bde90994b2a3383dee7326a8de14d.jpg" alt="springboot集成Elasticsearch实现各种搜索功能"><br /> 这样就ok了。</p> </div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3689.htm">Spring（六）&#8212;-Spring AOP概述及底层实现原理</a></p>
                                                <p>下一个：<a href="/html/category/article-3691.htm">中文时间日期解析错误-UnicodeEncodeError: &#8216;locale&#8217; codec can&#8217;t encode character &#8216;\u5e74&#8217; in position 2: Illegal</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7144.htm" title="动物疫苗去哪里买的到 动物疫苗去哪里买的到呢">动物疫苗去哪里买的到 动物疫苗去哪里买的到呢</a></li>
                        <li class="py-2"><a href="/html/category/article-4573.htm" title="安安宠物电话（安安宠物医院地址）">安安宠物电话（安安宠物医院地址）</a></li>
                        <li class="py-2"><a href="/html/category/article-6084.htm" title="宠物领养网免费平台有哪些公司的 宠物领养网免费平台有哪些公司的">宠物领养网免费平台有哪些公司的 宠物领养网免费平台有哪些公司的</a></li>
                        <li class="py-2"><a href="/html/category/article-6960.htm" title="芭比宠物医院的地址（芭比堂宠物医院营业时间）">芭比宠物医院的地址（芭比堂宠物医院营业时间）</a></li>
                        <li class="py-2"><a href="/html/category/article-6776.htm" title="动物疫苗贵吗多少钱（动物疫苗多少钱一支）">动物疫苗贵吗多少钱（动物疫苗多少钱一支）</a></li>
                        <li class="py-2"><a href="/html/category/article-6961.htm" title="收银打印纸怎么装视频(收银台打印纸怎么安装)">收银打印纸怎么装视频(收银台打印纸怎么安装)</a></li>
                        <li class="py-2"><a href="/html/category/article-6915.htm" title="沈阳哪里有批发猫的市场（沈阳最大猫咪批发市场）">沈阳哪里有批发猫的市场（沈阳最大猫咪批发市场）</a></li>
                        <li class="py-2"><a href="/html/category/article-7007.htm" title="免费领养宠物正规网站平台下载大全视频（免费领养宠物的网站）">免费领养宠物正规网站平台下载大全视频（免费领养宠物的网站）</a></li>
                        <li class="py-2"><a href="/html/category/article-6172.htm" title="动物疫苗研发生产流程QA生产职责（动物疫苗工艺）">动物疫苗研发生产流程QA生产职责（动物疫苗工艺）</a></li>
                        <li class="py-2"><a href="/html/category/article-5594.htm" title="新手开宠物店需要了解哪些知识点（新手开宠物店需要了解哪些知识点和技能）">新手开宠物店需要了解哪些知识点（新手开宠物店需要了解哪些知识点和技能）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">10</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                    <p>Bolivia Address 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/jquery-3.3.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/addons/xcblog/js/frontend/boliviaaddress/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>